(import cstdio)
(import macros)
(import stdlib)
(import array)

(using-namespace std.macros
(using-namespace std.concepts
  (def-concept Add (refines Type) (T)
    (let ((success \ true))
      (concept-assert (exists-fn mc (qq (uq T) + (uq T) (uq T)))
                      T "+ is not defined over this type")
      success))
  (def-concept Sub (refines Type) (T)
    (let ((success \ true))
      (concept-assert (exists-fn mc (qq (uq T) - (uq T) (uq T)))
                      T "- is not defined over this type")
      success))
  (def-concept-macro + intern ((T ForwardContainer))
    (let ((success \ (not (has-errors mc 
                            (qq std.concepts.implements 
                              (value-type (nullptr (uq T))) Add)))))
      (and (not success)
        (do (report-error mc T "element does not implement Add")
            (return (nullptr DNode))))
      (qq def +
        (fn intern (retval (uq T)) ((a (uq T)) (b (uq T)))
          (for ((b1 \ (begin a))
                (e1 \ (end a))
                (b2 \ (begin b))
                (o  \ (begin (@ retval))))
               (!= b1 e1)
               (do (setv b1 (successor b1))
                   (setv b2 (successor b2))
                   (setv o  (successor o)))
            (sink o (+ (@ (source b1)) (@ (source b2)))))
          (return)))))
  (def-concept-macro - intern ((T ForwardContainer))
    (let ((success \ (not (has-errors mc 
                            (qq std.concepts.implements 
                              (value-type (nullptr (uq T))) Sub)))))
      (and (not success)
        (do (report-error mc T "element does not implement Sub")
            (return (nullptr DNode))))
      (qq def -
        (fn intern (retval (uq T)) ((a (uq T)) (b (uq T)))
          (for ((b1 \ (begin a))
                (e1 \ (end a))
                (b2 \ (begin b))
                (o  \ (begin (@ retval))))
               (!= b1 e1)
               (do (setv b1 (successor b1))
                   (setv b2 (successor b2))
                   (setv o  (successor o)))
            (sink o (- (@ (source b1)) (@ (source b2)))))
          (return)))))
  (instantiate Array int 3)
  (implement Add int) 
  (implement Sub int)
  (instantiate + (Array int 3))
  (instantiate - (Array int 3))))

(def main (fn extern-c int (void)
  (let ((a (Array int 3))
        (b (Array int 3))
        (c (Array int 3)))
    (for (i \ 0) (< i 3) (incv i)
      (setf ($ a i) i)
      (setf ($ b i) (* i 2)))
    (setv c (+ a b))
    (printf "%d %d %d\n" (@$ c 0) (@$ c 1) (@$ c 2))
    (setv c (- b a))
    (printf "%d %d %d\n" (@$ c 0) (@$ c 1) (@$ c 2)))
  0))
