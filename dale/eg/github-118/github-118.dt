(import macros)

(def mys (struct intern ((a int) (b int))))

(using-namespace std.macros
  (def with-slots (macro intern (forms value rest)
    (def arg-count (var auto \ (arg-count mc)))
    (setv arg-count (- arg-count 2))
    (def varargs-list (var auto \ (get-varargs-list mc arg-count rest)))
    (let ((holder  \ (nullptr DNode))
          (holder' \ (nullptr DNode))
          (forms'  \ (@:@ forms list-node)))
      (while (not (null forms'))
        (let ((is-list \ (not (null (@:@ forms' list-node))))
              (binding \ (if is-list (@:@ forms' list-node) forms'))
              (element \ (if is-list (@:' forms' list-node next-node)
                                     forms'))
              (next    \ (qq (uq binding) \ (: (uq value) (uq element)))))
          (if (null holder)
              (setv holder  next)
              (setf (:@ holder' next-node) next))
          (setv holder' next))
        (setv forms' (@:@ forms' next-node)))
      (qq let ((uql holder)) (uql varargs-list))))))

(def main (fn extern-c int (void)
  (let ((m mys ((a 10) (b 20))))
    (with-slots (a (c b)) m
      (printf "%d %d\n" (@ a) (@ c))
      (setf a 15)
      (setf c 25)
      (printf "%d %d\n" (@ a) (@ c)))
    (printf "%d %d\n" (@: m a) (@: m b)))
  0))
