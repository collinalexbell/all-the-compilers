(import cstdio)
(import derivations)
(import concepts)
(import algorithms)
(import vector)

(using-namespace std.concepts

(def mys (struct intern ((a int) (b int) (c int))))

(def init
  (fn intern bool ((dst (ref mys)) (a int) (b int) (c int))
    (setf (:@ dst a) a)
    (setf (:@ dst b) b)
    (setf (:@ dst c) c)
    true))

(def setf-copy-init (fn intern bool ((dst (p mys)) (src (p (const mys))))
  (printf ".")
  (setf (:@ dst a) (@:@ src a))
  (setf (:@ dst b) (@:@ src b))
  (setf (:@ dst c) (@:@ src c))
  true))

(def setf-copy-assign (fn intern bool ((dst (p mys)) (src (p (const mys))))
  (setf-copy-init dst src)))

(implement PreferRefs mys)
(implement Type mys)
(implement Struct mys)
(instantiate swap mys)

(mfor Op (= != < <= > >=)
  (instantiate Op mys))
(mfor C (Swappable EqualityComparable LessThanComparable)
  (implement C mys))

(mfor Cm (Vector min max)
  (instantiate Cm mys))

(mfor Cm (sort for-each lower-bound upper-bound
          binary-search equal-range)
  (instantiate Cm (Iterator (Vector mys))))

(instantiate copy   (Iterator (Vector mys)) (Iterator (Vector mys)))
(instantiate assign (Vector mys) (Iterator (Vector mys)))

(def ra (fn intern void ((m (ref mys)))
  (printf "%d %d %d\n" (@:@ m a) (@:@ m b) (@:@ m c))
  (return)))

(def main (fn extern-c int (void)
  (def a (var auto mys (init a 1 2 3)))
  (def b (var auto mys (init b 1 2 4)))
  (def c (var auto mys (init c 1 3 4)))
  (def d (var auto mys (init d 2 3 4)))

  (let ((vec  (Vector mys))
        (vec2 (Vector mys)))
    (push-back vec a)
    (push-back vec b)
    (push-back vec c)
    (push-back vec d)
    (push-back vec2 d)
    (push-back vec2 c)
    (push-back vec2 b)
    (push-back vec2 a)

    (printf "Pre for-each\n")
    (for-each (begin vec) (end vec) (# ra))
    (printf "Post for-each\n")

    (def i1 (var auto \ (lower-bound (begin vec) (end vec) b)))
    (ra (@ (source i1)))
    (printf "Post lower-bound\n")

    (def i2 (var auto \ (upper-bound (begin vec) (end vec) b)))
    (ra (@ (source i2)))
    (printf "Post upper-bound\n")

    (def i3 (var auto \ (binary-search (begin vec) (end vec) b)))
    (ra (@ (source i2)))
    (printf "Post binary-search\n")

    (def e (var auto \ (max a d)))
    (ra e)
    (printf "Post max\n")

    (def f (var auto \ (min a d)))
    (ra f)
    (printf "Post min\n")

    (copy (begin vec) (end vec) (begin vec2))
    (printf "Post copy\n")

    (copy (begin vec) (end vec) (begin vec2))
    (printf "Post copy\n")
    (for-each (begin vec2) (end vec2) (# ra))

    (pop-back vec2)
    (pop-back vec2)
    (assign vec (begin vec2) (end vec2))
    (printf "Post assign\n")
    (for-each (begin vec2) (end vec2) (# ra))

    (push-back vec2 c)
    (push-back vec2 d)
    (assign vec (begin vec2) (end vec2))
    (printf "Post regen\n")
    (def eq (var auto \ (= vec vec2)))
    (printf "Eq: %d\n" (if eq 1 0))
    (def lt (var auto \ (< vec vec2)))
    (printf "Lt: %d\n" (if lt 1 0)))

  0))
)
