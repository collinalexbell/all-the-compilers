(import list)

(std.concepts.instantiate List int)

(def print-forward
  (fn intern void ((lst (ref (List int))))
    (let ((b \ (begin (@ lst)))
          (e \ (end   (@ lst))))
      (while (!= b e)
        (printf "%d " (@ (source b)))
        (setv b (successor b))))
    (printf "\n")
    (return)))

(def print-backward
  (fn intern void ((lst (ref (List int))))
    (let ((b \ (rbegin (@ lst)))
          (e \ (rend   (@ lst))))
      (while (!= b e)
        (printf "%d " (@ (source b)))
        (setv b (successor b))))
    (printf "\n")
    (return)))

(def main
  (fn extern-c int (void)
    (let ((lst (List int)))
      (push-back lst 1)
      (push-back lst 2)
      (pop-back lst)
      (push-back lst 3)
      (push-back lst 4)
      (print-forward lst)
      (print-backward lst)
      (let ((i \ 0))
        (for true (< i 100) (incv i)
          (pop-back lst)))
      (print-forward lst)
      (print-backward lst)

      (push-front lst 1)
      (push-front lst 2)
      (push-front lst 3)
      (push-front lst 4)
      (print-forward lst)
      (print-backward lst)
      (pop-front lst)
      (pop-front lst)
      (print-forward lst)
      (print-backward lst)

      (push-back lst 4)
      (push-back lst 5)
      (insert lst (successor (successor (begin lst))) 3)
      (print-forward lst)
      (print-backward lst)
      (erase lst (successor (begin lst)))
      (erase lst (successor (successor (begin lst))))
      (print-forward lst)
      (print-backward lst)
      (erase lst (begin lst))
      (print-forward lst)
      (print-backward lst)
      (erase lst (successor (begin lst)))
      (print-forward lst)
      (print-backward lst)
      (erase lst (begin lst))
      (print-forward lst)
      (print-backward lst)
      (push-front lst 1)
      (push-front lst 2)
      (push-front lst 3)
      (push-front lst 4)
      (print-forward lst)
      (print-backward lst)
      (clear lst)
      (print-forward lst)
      (print-backward lst)
    )
    0))
