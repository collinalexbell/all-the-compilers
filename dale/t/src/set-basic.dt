(import cstdio)

(import macros)
(import utility)
(import set)

(std.concepts.instantiate Set int)

(def debug (var auto bool false))

(def print-set
  (fn intern void ((sp (ref (Set int))))
    (let ((b \ (begin (@ sp)))
          (e \ (end   (@ sp))))
      (for true (!= b e) (setv b (successor b))
        (printf "%d " (@ (source b)))))
    (printf "\n")
    (return)))

(def dump-nodes
  (fn intern void ((sp (ref (Set int))))
    (if (not debug) (return) 0)
    (let ((b \ (begin (@ sp)))
          (e \ (end   (@ sp))))
      (for true (!= b e) (setv b (successor b))
      (printf "%d (%p, %p %p %p)\n" (@ (source b))
            (@: b element)
            (@:@ (@: b element) left)
            (@:@ (@: b element) up)
            (@:@ (@: b element) right))))
    (printf "\n")
    (return)))

(def main
  (fn extern-c int (void)
    (let ((s (Set int)))
      (if (empty s)
          (printf "Set is empty\n")
          (printf "Set is not empty\n"))

      (print-set s)

      (insert s 3)
      (printf "Inserted element\n")

      (if (empty s)
          (printf "Set is empty\n")
          (printf "Set is not empty\n"))

      (print-set s)
      
      (insert s 1)
      (insert s 5)
      (insert s 2)
      (insert s 4)

      (printf "Should be 1..5\n")
      (print-set s)
      (dump-nodes s)

      (erase (successor (successor (begin s))))
      (printf "Should be 1, 2, 4, 5\n")
      (print-set s)
      (dump-nodes s)

      (erase (begin s))
      (printf "Should be 2, 4, 5\n")
      (print-set s)
      (dump-nodes s)

      (erase (begin s))
      (printf "Should be 4, 5\n")
      (print-set s)

      (erase (begin s))
      (printf "Should be 5\n")
      (print-set s)
      
      (if (empty s)
          (printf "Set is empty\n")
          (printf "Set is not empty\n"))

      (erase (begin s))
      (printf "Should now be empty\n")
      (print-set s)
      
      (if (empty s)
          (printf "Set is empty\n")
          (printf "Set is not empty\n"))

      (insert s 5)
      (insert s 3)
      (insert s 4)
      (insert s 2)
      (insert s 1)

      (if (empty s)
          (printf "Set is empty\n")
          (printf "Set is not empty\n"))

      (printf "Should be 1..5\n")
      (print-set s)
    0)))


