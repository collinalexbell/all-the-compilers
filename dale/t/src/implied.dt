(import cstdio)

(import macros)
(import utility)
(import vector)
(import derivations)
(import algorithms)

(std.concepts.instantiate Pair int int)
(std.concepts.implement Struct (Pair int int))
(std.concepts.instantiate swap (Pair int int))
(std.concepts.implement Swappable (Pair int int))
(std.concepts.instantiate relations (Pair int int))
(std.concepts.implement EqualityComparable (Pair int int))
(std.concepts.implement LessThanComparable (Pair int int))

(std.concepts.instantiate Vector int)
(std.concepts.instantiate Vector (Pair int int))
(std.concepts.instantiate copy (Iterator (Vector (Pair int int)))
                                (Iterator (Vector (Pair int int))))
(std.concepts.instantiate assign (Vector (Pair int int))
                                  (Iterator (Vector (Pair int int))))

(def main
  (fn extern-c int (void)
    (let ((vec   (Vector (Pair int int)) (init vec 1))
          (vec2  (Vector (Pair int int)) (init vec2 200))
          (one  (Pair int int) ((first 1) (second 2)))
          (two  (Pair int int) ((first 3) (second 4))))
    (printf "Empty?: %d\n" (if (empty vec) 1 0))

    (push-back vec one)
    (push-back vec two)
    (push-back vec one)
    (push-back vec two)
    (push-back vec one)
    
    (let ((i size 0))
      (for true (< i (size vec)) (setv i (+ i (cast 1 size)))
        (printf "%d %d\n" (@ ($ vec i)))))

    (printf "Empty?: %d\n" (if (empty vec) 1 0))
    (resize vec (cast 0 size))
    (printf "Empty?: %d\n" (if (empty vec) 1 0))

    (let ((i size 0))
      (for true (< i (size vec)) (setv i (+ i (cast 1 size)))
        (printf "%d %d\n" (@ ($ vec i)))))

    (push-back vec one)
    (push-back vec two)
    (push-back vec one)
    (push-back vec two)
    (push-back vec two)

    (push-back vec2 two)
    (push-back vec2 two)
    (push-back vec2 two)
    (push-back vec2 two)
    (push-back vec2 two)

    (printf "for loop\n")

    (let ((i size 0))
      (for true (< i (size vec)) (setv i (+ i (cast 1 size)))
        (printf "%d %d\n" (@ ($ vec i)))))

    (printf "iterator\n")

    (let ((b \ (begin vec))
          (e \ (end   vec)))
      (for true (< b e) (setv b (successor b))
        (printf "%d %d\n" (@ (source b)))
        (sink b one)))
   
    (printf "riterator\n")

    (let ((b \ (rbegin vec))
          (e \ (rend   vec)))
      (for true (< b e) (setv b (successor b))
        (printf "%d %d\n" (@ (source b)))))

    (printf "pre copy\n")

    (let ((b \ (begin vec2))
          (e \ (end   vec2)))
      (for true (< b e) (setv b (successor b))
        (printf "%d %d\n" (@ (source b)))))

    (copy (begin vec) (end vec) (begin vec2))

    (printf "post copy\n")

    (let ((b \ (begin vec2))
          (e \ (end   vec2)))
      (for true (< b e) (setv b (successor b))
        (printf "%d %d\n" (@ (source b)))))

    (clear vec)
    (clear vec2)

    (push-back vec2 two)
    (push-back vec2 two)
    (push-back vec2 two)
    (push-back vec2 two)
    (push-back vec2 two)

    (printf "pre assign from two to one\n")

    (let ((b \ (begin vec))
          (e \ (end   vec)))
      (for true (< b e) (setv b (successor b))
        (printf "%d %d\n" (@ (source b)))))

    (assign vec (begin vec2) (end vec2))

    (printf "post assign\n")
    
    (let ((b \ (begin vec))
          (e \ (end   vec)))
      (for true (< b e) (setv b (successor b))
        (printf "%d %d\n" (@ (source b)))))

    0)))
