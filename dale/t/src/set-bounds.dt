(import cstdio)

(import macros)
(import utility)
(import set)

(std.concepts.instantiate Set int)

(def debug (var auto bool false))

(def print-set
  (fn intern void ((sp (ref (Set int))))
    (let ((b \ (begin (@ sp)))
          (e \ (end   (@ sp))))
      (for true (!= b e) (setv b (successor b))
        (printf "%d " (@ (source b)))))
    (printf "\n")
    (return)))

(def dump-nodes
  (fn intern void ((sp (ref (Set int))))
    (if (not debug) (return) 0)
    (let ((b \ (begin (@ sp)))
          (e \ (end   (@ sp))))
      (for true (!= b e) (setv b (successor b))
      (printf "%d (%p, %p %p %p)\n" (@ (source b))
            (@: b element)
            (@:@ (@: b element) left)
            (@:@ (@: b element) up)
            (@:@ (@: b element) right))))
    (printf "\n")
    (return)))

(def main
  (fn extern-c int (void)
    (let ((s (Set int)))
      (let ((i \ 0))
        (for true (< i 100) (incv i)
          (insert s i)))

      (printf "%d\n" (@ (source (lower-bound s 0))))
      (printf "%d\n" (@ (source (upper-bound s 0))))

      (printf "%d\n" (@ (source (lower-bound s 50))))
      (printf "%d\n" (@ (source (upper-bound s 50))))

      (let ((i \ 50))
        (for true (< i 60) (incv i)
          (erase s i)))

    (print-set s)

      (printf "%d\n" (@ (source (lower-bound s 55))))
      (printf "%d\n" (@ (source (upper-bound s 55))))

      (if (not (= (upper-bound s 100)
                  (end s)))
          (printf "Should have got end iterator, but did not\n")
          (printf "Got end iterator\n"))

    0)))
