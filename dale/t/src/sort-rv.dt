(import cstdio)
(import unistd)
(import macros)
(import unique-ptr)
(import vector)
(import derivations)
(import algorithms)

(std.concepts.instantiate UniquePtr int)

(def = (fn intern bool ((a (const (p int))) (b (const (p int))))
  (= (@ a) (@ b))))
(def < (fn intern bool ((a (const (p int))) (b (const (p int))))
  (< (@ a) (@ b))))
(def = (fn extern bool ((a (ref (const (UniquePtr int))))
                        (b (ref (const (UniquePtr int)))))
  (= (core-@:@ a pointer) (core-@:@ b pointer))))
(def < (fn extern bool ((a (ref (const (UniquePtr int)))) 
                        (b (ref (const (UniquePtr int)))))
  (< (core-@:@ a pointer) (core-@:@ b pointer))))

(std.concepts.instantiate relations (UniquePtr int))
(std.concepts.instantiate swap (UniquePtr int))
(std.concepts.implement Swappable (UniquePtr int))
(std.concepts.implement EqualityComparable (UniquePtr int))
(std.concepts.implement LessThanComparable (UniquePtr int))

(std.concepts.instantiate Vector (UniquePtr int))
(std.concepts.instantiate sort (Iterator (Vector (UniquePtr int))))

(def main
  (fn extern-c int (void)
    (let ((vec    (Vector (UniquePtr int)) (init vec 1))
          (myint1 \ (malloc' 1 int))
          (myptr1 (UniquePtr int))
          (myint2 \ (malloc' 1 int))
          (myptr2 (UniquePtr int)))
      (setf myint1 200)
      (init myptr1 myint1)
      (printf "Empty?: %d\n" (if (empty vec) 1 0))
      (printf "Unique pointer has value: %d\n"
              (not (p= (nullptr int) (@: myptr1 pointer))))
      (push-back vec (move myptr1))
      (printf "Empty?: %d\n" (if (empty vec) 1 0))
      (printf "Unique pointer has value: %d\n"
              (not (p= (nullptr int) (@: myptr1 pointer))))

      (setf myint2 100)
      (init myptr2 myint2)
      (push-back vec (move myptr2))

      (sort (begin vec) (end vec))

      (printf "Unique pointer has value: %d\n"
              (not (p= (nullptr int) (@: myptr1 pointer))))
      (setv myptr1 (move (@ (back vec))))
      (printf "Unique pointer has value: %d\n"
              (not (p= (nullptr int) (@: myptr1 pointer))))
      (pop-back vec)

      (printf "%d\n" (@ (get myptr1)))
      (printf "Size: %d\n" (size vec))

      (printf "Unique pointer has value: %d\n"
              (not (p= (nullptr int) (@: myptr2 pointer))))
      (setv myptr2 (move (@ (back vec))))
      (printf "Unique pointer has value: %d\n"
              (not (p= (nullptr int) (@: myptr2 pointer))))
      (pop-back vec)

      (printf "%d\n" (@ (get myptr2)))
      (printf "Size: %d\n" (size vec))
      0)))
