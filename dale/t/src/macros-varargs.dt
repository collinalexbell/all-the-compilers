(import cstdio)
(import macros)
(import cstdlib)

(def m-va-test
  (macro intern (rest)
    (def temp-node (var auto (p DNode)))
    (def my-sum    (var auto int 0))

    (def arg-count (var auto \ (arg-count mc)))
    (def index (var auto int 0))

    (label begin-loop)
      (if (= 0 arg-count)
          (goto end-loop)
          (do
            (setv arg-count (- arg-count 1))
            (setv temp-node (@$ rest index))
            (setv index (+ index 1))
            (setv my-sum (+ my-sum (atoi (@ (: (@ temp-node) token-str)))))
            (goto begin-loop)))

    (label end-loop)

      (def retval (var auto (p DNode)
                          (cast (pool-malloc mc (sizeof DNode)) (p DNode))))

      (def nullp  (var auto (p DNode)
                          (cast (pool-malloc mc (sizeof DNode)) (p DNode))))
      
      (setv nullp (cast 0 (p DNode)))
      
      (def retstr (var auto (p char) (cast (pool-malloc mc (cast
      20 size)) (p char))))
      (sprintf retstr "%d" my-sum)

      (setf (: (@ retval) is-list)   0)
      (setf (: (@ retval) token-str) retstr)
      (setf (: (@ retval) list-node) nullp)
      (setf (: (@ retval) next-node) nullp)

      (return retval)))

(def main
  (fn extern-c int (void)
    (printf "%d\n" (m-va-test 1 2 3 4 5))
    (return 0)))
