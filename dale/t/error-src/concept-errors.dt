(import concepts-core)

(using-namespace std.macros (using-namespace std.concepts
(def-concept Addable (refines) (T)
  (if (exists-fn mc (qq bool + (uq T) (uq T)))
      true
      (do (report-error mc T "type does not implement Addable")
          false)))

(def-concept AddableAndSubtractable (refines NotExists) (T)
  (if (exists-fn mc (qq bool - (uq T) (uq T)))
      true
      (do (report-error mc T "type does not implement AddableAndSubtractable")
          false)))

(def-concept AddableAndSubtractable (refines Addable) (T)
  (if (exists-fn mc (qq bool - (uq T) (uq T)))
      true
      (do (report-error mc T "type does not implement AddableAndSubtractable")
          false)))

(implement AddableAndSubtractable int)
(implement Addable float)

(def-concept-macro Add3 intern ((T Addable))
  (qq do
    (def +
      (fn extern (uq T) ((a (uq T)) (b (uq T)) (c (uq T)))
        (+ a (+ b c))))))

(def-concept-macro Sub3 intern ((T AddableAndSubtractable))
  (qq do
    (def -
      (fn extern (uq T) ((a (uq T)) (b (uq T)) (c (uq T)))
        (- a (+ b c))))))

(instantiate Add3 int)
(instantiate Add3 float)
(instantiate Sub3 int)
(instantiate Sub3 float)

(def main
  (fn extern-c int (void)
    (let ((n \ (+ 1 2 3)))
      (printf "%d\n" n))
    (let ((m \ (- 1 2 3)))
      (printf "%d\n" m))
    0))
))
