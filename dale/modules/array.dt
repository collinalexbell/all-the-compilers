#|
@module array

Concept macro for a fixed-size container. Apart from the `Array` macro
and concept macro, the documentation in this module is for a generated
array instance of type `T`, with size `N`.

All of the functions that take `Iterator` arguments are defined for
`ReverseIterator`s as well, notwithstanding that there is no
documentation for those instances.

The `Array` type implements `RandomAccessContainer`. Its iterators
implement `OutputIterator` and `RandomAccessIterator`.
|#
(module array (attr cto))

(import cstdio)
(import macros)
(import assert)
(import utility)
(import concepts)
(import derivations)
(import algorithms)

#|
@macro Array

Expands to the concrete type name of the `Array` generated by way of
the concept macro.

@param T    The type node.
|#
(def Array
  (macro extern (T N)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string mc "array" T N typename))
           (return (nullptr DNode)))
      (def n (var auto (p DNode) (std.macros.mnfv mc typename)))
      (return n))))

(using-namespace std.macros
(using-namespace std.concepts

#|
@concept-macro Array

Expands to an `Array` definition over the relevant type.

@param T    The type for the elements of the array.
@param-type Type
@param N    The length of the array.
@param-type Value
|#
(def-concept-macro Array extern ((T Type) (N Value))
  (prefer-ref-bindings (uq T) 1)

  (and (= 1 (@:@ N is-list))
       (do (report-error mc N "second argument must be an atom")
           (return (nullptr DNode))))

  (let ((typename       (array-of 250 char))
        (etypename      (array-of 250 char)))
    ; Generate the type names and nodes, and register the main 'array'
    ; type.
    (and (not (make-type-string mc "array" T N typename))
         (return (nullptr DNode)))
    (and (not (make-type-display-string mc "Array" T N etypename))
         (return (nullptr DNode)))

    (def typenode (var auto (p DNode) (mnfv mc typename)))

    (register-type mc typename etypename)

    (def copy-functions (var auto (p DNode)
      (if copy-disabled-1
          (qq do (def setf-copy-disabled (fn extern bool ((dst (Array (uq T) (uq N)))))))
          (qq do 
            (def setf-copy-init (fn extern bool ((dst (p (Array (uq T) (uq N))))
                                                 (src (p (Array (uq T) (uq N)))))
              (init (@ dst))
              (let ((b1 \ (begin (@ src)))
                    (e1 \ (end   (@ src)))
                    (b2 \ (begin (@ dst)))
                    (e2 \ (end   (@ dst))))
                (for true (!= b1 e1) (do (setv b1 (successor b1))
                                         (setv b2 (successor b2)))
                  (sink b2 (@ (source b1)))))
              true))
        
            (def setf-copy-assign (fn extern bool ((dst (p (Array (uq T) (uq N))))
                                                   (src (p (Array (uq T) (uq N)))))
              (setf-copy-init dst src)))))))

    (def is-equality-comparable
      (var auto bool (not (has-errors mc
                                      (qq std.concepts.implements
                                          (uq T) EqualityComparable)))))
    (def is-less-than-comparable
      (var auto bool (not (has-errors mc
                                      (qq std.concepts.implements
                                          (uq T) LessThanComparable)))))

    (def equality-comparable-forms (var auto (p DNode)
        (if is-equality-comparable
            (qq do (mfor F (= !=) (instantiate F (Array (uq T) (uq N))))
                   (implement EqualityComparable (Array (uq T) (uq N))))
            (qq no-op))))
    (def less-than-comparable-forms (var auto (p DNode)
        (if is-less-than-comparable
            (qq do (mfor F (< <= > >=) (instantiate F (Array (uq T) (uq N))))
                   (implement LessThanComparable (Array (uq T) (uq N))))
            (qq no-op))))

    (qq do

    (import cstring)
    (import derivations)

    (using-namespace std.macros
    (using-namespace std.concepts

    #|
    @struct (Array T N)

    The core array structure type.

    @linkage extern
    |#
    (def (Array (uq T) (uq N))
      (struct extern ((elements (array-of (uq N) (uq T))))))

    #|
    @fn init

    Initialise an array. (This is a no-op for this container: to
    actually zero the array, it is necessary to iterate over it and
    set values accordingly.)

    @param arrp     An array reference.
    |#
    (def init (fn extern bool ((arrp (ref (Array (uq T) (uq N)))))
      true))

    #|
    @fn empty

    Determine whether the array is empty. (Since arrays have a fixed
    size, this will always return true, unless the array actually has
    a size of zero.)

    @param arrp     An array reference.
    |#
    (def empty (fn extern bool ((arrp (ref (const (Array (uq T) (uq N))))))
      (= 0 (uq N))))

    #|
    @fn size

    Returns the number of elements in the array (This is `N`, for all
    instances of the array.)

    @param arrp     An array reference.
    |#
    (def size (fn extern size ((arrp (ref (const (Array (uq T) (uq N))))))
      (uq N)))

    #|
    @fn max-size

    Returns the number of elements that can be accommodated by the
    array. (This is also `N`, for all instances of the array.)

    @param arrp     An array reference.
    |#
    (def max-size (fn extern size ((arrp (ref (const (Array (uq T) (uq N))))))
      (uq N)))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the array. This
    only uses the type node for dispatch purposes, so it's safe to
    call this with e.g. `(nullptr (Array T N))` as the argument.

    @param arrp     An array pointer.
    |#
    (def value-type
      (macro extern ((arrp (p (Array (uq T) (uq N)))))
        (qq do (uq T))))

    #|
    @macro size-type

    Expands to the underlying size type of the array.

    @param arrp     A type node.
    |#
    (def size-type
      (macro extern ((arrp (p (Array (uq T) (uq N)))))
        (qq do size)))

    #|
    @macro difference-type

    Expands to the underlying iterator difference type of the array.

    @param arrp     A type node.
    |#
    (def difference-type
      (macro extern ((arrp (p (Array (uq T) (uq N)))))
        (qq do ptrdiff)))

    #|
    @struct (Iterator (Array T N))

    @linkage extern
    |#
    (def (Iterator (Array (uq T) (uq N)))
      (struct extern ((element (p (uq T)))
                      (arrp    (p (Array (uq T) (uq N)))))))

    #|
    @fn begin

    Returns the iterator for the first array element.

    @param arrp     An array reference.
    |#
    (def begin (fn extern (Iterator (Array (uq T) (uq N)))
                             ((arrp (ref (Array (uq T) (uq N)))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (cast (:@ arrp elements)
                        (p (uq T))))))))

    #|
    @fn end

    Returns the iterator representing the end of the list (sentinel).

    @param arrp     An array reference.
    |#
    (def end (fn extern (Iterator (Array (uq T) (uq N)))
                            ((arrp (ref (Array (uq T) (uq N)))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (p+ (cast (:@ arrp elements) 
                            (p (uq T)))
                      (cast (uq N) size)))))))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the iterator.

    @param iterp    An iterator pointer.
    |#
    (def value-type 
      (macro extern ((iterp (p (Iterator (Array (uq T) (uq N))))))
        (qq do (uq T))))
 
    #|
    @macro distance-type

    Expands to the underlying distance type of the iterator.

    @param iterp    An iterator pointer.
    |#
    (def distance-type 
      (macro extern ((iterp (p (Iterator (Array (uq T) (uq N))))))
        (qq do size)))

    #|
    @fn source

    Returns a pointer to the iterator's value.

    @param iter     An iterator.
    |#
    (def source (fn extern (p (uq T)) 
                            ((iter (Iterator (Array (uq T) (uq N)))))
      (@: iter element)))

    #|
    @fn sink

    Set the given value at the specified position in the list.

    @param iter     An iterator.
    @param v        The new value.
    |#
    (def sink (fn extern bool ((iter (Iterator (Array (uq T) (uq N))))
                               (v ((uq tpw-1) (uq T))))
      (setf (@: iter element) ((uq tvw-1) v))))

    #|
    @fn successor

    Returns the iterator for the position that follows the argument
    iterator.

    @param iter     An iterator.
    |#
    (def successor (fn extern (Iterator (Array (uq T) (uq N)))
                              ((iter (Iterator (Array (uq T) (uq N)))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp (@: iter arrp))
         (element (p+ (@: iter element) 1))))))

    #|
    @fn predecessor

    Returns the iterator for the position just before the argument
    iterator.

    @param iter     An iterator.
    |#
    (def predecessor (fn extern (Iterator (Array (uq T) (uq N))) 
                                ((iter (Iterator (Array (uq T) (uq N)))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp (@: iter arrp))
         (element (p- (@: iter element) 1))))))

    #|
    @fn =

    @param iter1    The first iterator.
    @param iter2    The second iterator.
    |#
    (def = (fn extern bool ((iter1 (Iterator (Array (uq T) (uq N))))
                            (iter2 (Iterator (Array (uq T) (uq N)))))
      (p= (@: iter1 element) (@: iter2 element))))

    #|
    @fn <

    @param iter1    The first iterator.
    @param iter2    The second iterator.
    |#
    (def < (fn extern bool ((iter1 (Iterator (Array (uq T) (uq N))))
                            (iter2 (Iterator (Array (uq T) (uq N)))))
      (p< (@: iter1 element) (@: iter2 element))))

    (implement Type (Iterator (Array (uq T) (uq N))))
    (instantiate != (Iterator (Array (uq T) (uq N))))

    (mfor F (<= > >=)
      (instantiate F (Iterator (Array (uq T) (uq N)))))

    (implement EqualityComparable (Iterator (Array (uq T) (uq N))))
    (implement LessThanComparable (Iterator (Array (uq T) (uq N))))
    
    (instantiate swap (Iterator (Array (uq T) (uq N))))
    (implement Swappable (Iterator (Array (uq T) (uq N))))

    #|
    @fn +

    @param iter     An array iterator.
    @param n        The number of steps forward.
    |#
    (def +
      (fn extern (Iterator (Array (uq T) (uq N)))
                           ((iter (Iterator (Array (uq T) (uq N))))
                           (n size))
        ((Iterator (Array (uq T) (uq N))) 
          ((arrp (@: iter arrp))
           (element (p+ (@: iter element) n))))))

    #|
    @fn -

    @param iter     An array iterator.
    @param n        The number of steps backward.
    |#
    (def -
      (fn extern (Iterator (Array (uq T) (uq N)))
                           ((iter (Iterator (Array (uq T) (uq N))))
                           (n size))
        ((Iterator (Array (uq T) (uq N))) 
          ((arrp (@: iter arrp))
           (element (p- (@: iter element) n))))))

    #|
    @struct (ReverseIterator (Array T N))

    @linkage extern
    |#
    (def (ReverseIterator (Array (uq T) (uq N)))
      (struct extern ((element (p (uq T)))
                      (arrp    (p (Array (uq T) (uq N)))))))

    #|
    @fn rbegin

    Returns the iterator for the last array element.

    @param arrp     An array reference.
    |#
    (def rbegin (fn extern (ReverseIterator (Array (uq T) (uq N)))
                             ((arrp (ref (Array (uq T) (uq N)))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (p+ (cast (:@ arrp elements)
                            (p (uq T)))
                      (cast (- (uq N) 1) size)))))))

    #|
    @fn rend

    Returns the iterator representing the beginning of the array (sentinel).

    @param arrp     An array reference.
    |#
    (def rend (fn extern (ReverseIterator (Array (uq T) (uq N)))
                          ((arrp (ref (Array (uq T) (uq N)))))
      ; This probably isn't safe in all cases (-1 at the beginning).
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (p- (cast (:@ arrp elements)
                            (p (uq T)))
                      (cast 1 size))))))) 

    (def value-type 
      (macro extern ((arrp (p (ReverseIterator (Array (uq T) (uq N))))))
        (qq do (uq T))))

    (def distance-type 
      (macro extern ((arrp (p (ReverseIterator (Array (uq T) (uq N))))))
        (qq do size)))

    (def source 
      (fn extern (p (uq T)) ((riter (ReverseIterator (Array (uq T) (uq N)))))
        (@: riter element)))

    (def sink (fn extern bool ((iter (ReverseIterator (Array (uq T) (uq N))))
                               (v ((uq tpw-1) (uq T))))
      (setf (@: iter element) ((uq tvw-1) v))))
    
    (def successor (fn extern (ReverseIterator (Array (uq T) (uq N)))
                         ((riter (ReverseIterator (Array (uq T) (uq N)))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp (@: riter arrp))
         (element (p- (@: riter element) 1))))))

    (def predecessor (fn extern (ReverseIterator (Array (uq T) (uq N))) 
                         ((riter (ReverseIterator (Array (uq T) (uq N)))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp (@: riter arrp))
         (element (p+ (@: riter element) 1))))))

    (def = (fn extern bool ((iter1 (ReverseIterator (Array (uq T) (uq N))))
                            (iter2 (ReverseIterator (Array (uq T) (uq N)))))
      (p= (@: iter1 element) (@: iter2 element))))

    (implement Type (ReverseIterator (Array (uq T) (uq N))))
    (instantiate != (ReverseIterator (Array (uq T) (uq N))))

    (def < (fn extern bool ((riter1 (ReverseIterator (Array (uq T) (uq N))))
                            (riter2 (ReverseIterator (Array (uq T) (uq N)))))
      (p> (@: riter1 element) (@: riter2 element))))

    (mfor F (<= > >=)
      (instantiate F (ReverseIterator (Array (uq T) (uq N)))))

    (implement EqualityComparable (Iterator (Array (uq T) (uq N))))
    (implement LessThanComparable (Iterator (Array (uq T) (uq N))))

    (instantiate swap (ReverseIterator (Array (uq T) (uq N))))
    (implement Swappable (ReverseIterator (Array (uq T) (uq N))))

    (def +
      (fn extern (ReverseIterator (Array (uq T) (uq N)))
                           ((iter1 (ReverseIterator (Array (uq T) (uq N))))
                           (n size))
        ((ReverseIterator (Array (uq T) (uq N))) 
          ((arrp (@: iter1 arrp))
           (element (p- (@: iter1 element) n))))))

    (def -
      (fn extern (ReverseIterator (Array (uq T) (uq N)))
                           ((iter1 (ReverseIterator (Array (uq T) (uq N))))
                           (n size))
        ((ReverseIterator (Array (uq T) (uq N))) 
          ((arrp (@: iter1 arrp))
           (element (p+ (@: iter1 element) n))))))

    ; Container relations and concepts.

    (def setf-move-init (fn extern bool ((dst (p (Array (uq T) (uq N))))
                                         (src (rv-ref (Array (uq T) (uq N)))))
      (init (@ dst))
      (let ((b1 \ (begin (@ src)))
            (e1 \ (end   (@ src)))
            (b2 \ (begin (@ dst)))
            (e2 \ (end   (@ dst))))
        (for true (!= b1 e1) (do (setv b1 (successor b1))
                                 (setv b2 (successor b2)))
          (sink b2 (move (@ (source b1))))))
      true))

    (def setf-move-assign (fn extern bool ((dst (p (Array (uq T) (uq N))))
                                           (src (rv-ref (Array (uq T) (uq N)))))
      (setf-move-init dst (move (@ src)))))

    (uq copy-functions)

    (implement Type (Array (uq T) (uq N)))
    (instantiate swap (Array (uq T) (uq N)))

    (implement Container (Array (uq T) (uq N)))
    (implement Type (p (Array (uq T) (uq N))))
    (uq equality-comparable-forms)
    (uq less-than-comparable-forms)

    #|
    @fn front

    Returns a pointer to the value of the first element in the array.

    @param arrp     An array reference.
    |#
    (def front (fn extern (p (uq T)) ((arrp (ref (Array (uq T) (uq N)))))
      (source (begin (@ arrp)))))

    #|
    @fn back

    Returns a pointer to the value of the last element in the array.

    @param arrp     An array reference.
    |#
    (def back (fn extern (p (uq T)) ((arrp (ref (Array (uq T) (uq N)))))
      (source (rbegin (@ arrp)))))

    #|
    @fn $

    @param arrp     An array reference.
    @param index    The index of the element.
    |#
    (def $
      (fn extern (p (uq T)) ((arrp (ref (Array (uq T) (uq N)))) (index int))
        (p+ (cast (:@ arrp elements)
                  (p (uq T)))
            (cast index size))))

    #|
    @fn $

    @param arrp     An array reference.
    @param index    The index of the element.
    |#
    (def $
      (fn extern (p (uq T)) ((arrp (ref (Array (uq T) (uq N)))) (index size))
        (p+ (cast (:@ arrp elements)
                  (p (uq T)))
            index)))

    (implement EqualityComparable (Iterator (Array (uq T) (uq N))))
    (implement EqualityComparable (ReverseIterator (Array (uq T) (uq N))))
    (implement LessThanComparable (Iterator (Array (uq T) (uq N))))
    (implement LessThanComparable (ReverseIterator (Array (uq T) (uq N))))
    (implement InputIterator (Iterator (Array (uq T) (uq N))))
    (implement InputIterator (ReverseIterator (Array (uq T) (uq N))))
    (implement OutputIterator (Iterator (Array (uq T) (uq N))))
    (implement OutputIterator (ReverseIterator (Array (uq T) (uq N))))
    (implement RandomAccessIterator (Iterator (Array (uq T) (uq N))))
    (implement RandomAccessIterator (ReverseIterator (Array (uq T) (uq N))))
    (implement RandomAccessContainer (Array (uq T) (uq N)))
    )))
)))

)
