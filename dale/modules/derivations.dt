#|
@module derivations

Provides concept macros for generating common functions over types.
The difference between this module and `algorithms` is that this one
is limited to very simple functions, namely the basic relations and
the `swap` function.

|#
(module derivations (attr cto))

(import macros)
(import assert)
(import cstdio)
(import concepts)

(using-namespace std.macros
(using-namespace std.concepts

(def setf-dsref-mul
  (macro intern (struct-name rest)
    (def arg-count (var auto \ (arg-count mc)))
    (setv arg-count (- arg-count 1))

    (def nullp (var auto (p DNode) (cast 0 (p DNode))))

    ; This node will be used to construct the 'do' form at the end.
    (def first-node  (var auto (p DNode) (cast 0 (p DNode))))

    ; Create an anchor node pointer. This will be set to the value
    ; of each newly-created node, so that the next node can be
    ; linked to it.
    (def anchor-node (var auto (p DNode) (cast 0 (p DNode))))

    (def va-dnode (var auto (p DNode) (cast 0 (p DNode))))
    (def sf-dnode (var auto (p DNode) (cast 0 (p DNode))))
    (def sv-dnode (var auto (p DNode) (cast 0 (p DNode))))

    (def st-dnode (var auto (p DNode) (mnfv mc (@:@ struct-name token-str))))
    (def index (var auto int 0))

    (label begin-loop)
    (if (= arg-count 0)
        (goto end-loop)
        (do
            ; Load the next DNode ptr.
            (setv va-dnode (@$ rest index))
            (setv index (+ index 1))
            (setv arg-count (- arg-count 1))

            ; Get the struct-field and struct-value nodes.
            (setv sf-dnode (@:@ va-dnode list-node))
            (setv sv-dnode (@:@ sf-dnode next-node))

            (setf (:@ sf-dnode next-node) nullp)

            (def setf-list-node (var auto (p DNode)
                (qq setf (:@ (uq st-dnode) (uq sf-dnode)) (uq sv-dnode))))

            ; Set first-node to this node, if it's null.
            (setv first-node (if (null first-node) setf-list-node first-node))

            ; If anchor-node is not null, make setf-list-node its next
            ; node.

            (if (not (null anchor-node))
                (do (setf (:@ anchor-node next-node) setf-list-node) 0)
                0)

            ; Set anchor-node to this node.
            (setv anchor-node setf-list-node)

            (goto begin-loop)))

    (label end-loop)

    ; Create a 'do' node, link it to first-node.
    (return (link-nodes-list mc 2 (mnfv mc "do") first-node))))

#|
@concept-macro swap

Expands to a `swap` function over references to the provided type.

@param T    The type node.
|#
(def-concept-macro swap extern ((T Type))
  (qq do
    (def swap (fn extern void ((a (ref (uq T)))
                               (b (ref (uq T))))
      (let ((temp (uq T) (move (@ a))))
        (setf a (move (@ b)))
        (setf b (move temp))
        (return))))))

#|
@concept-macro !=

Expands to a `!=` function over the provided type. `=` must be defined
over the type before calling this macro.

@param T    The type node.
|#
(def-concept-macro != extern ((T Type))
  (and (not (exists-fn mc (qq bool = (uq T) (uq T))))
       (do (report-error mc T "type does not implement =")
           (return (nullptr DNode))))
  (qq do
    (def != (fn extern bool ((a (uq T)) (b (uq T)))
      (not (= a b))))))

(def-concept-macro != extern ((T PreferRefs))
  (and (not (exists-fn mc (qq bool = (uq T) (uq T))))
       (do (report-error mc T "type does not implement =")
           (return (nullptr DNode))))
  (qq do
    (def != (fn extern bool ((a (ref (const (uq T)))) (b (ref (const (uq T)))))
      (not (= (@ a) (@ b)))))))

#|
@concept-macro <=

Expands to a `<=` function over the provided type. `<` must be defined
over the type before calling this macro.

@param T    The type node.
|#
(def-concept-macro <= extern ((T Type))
  (and (not (exists-fn mc (qq bool < (uq T) (uq T))))
       (do (report-error mc T "type does not implement <")
           (return (nullptr DNode))))
  (qq do
    (def <= (fn extern bool ((a (uq T)) (b (uq T)))
      (or (< a b)
          (not (< b a)))))))

(def-concept-macro <= extern ((T PreferRefs))
  (and (not (exists-fn mc (qq bool < (uq T) (uq T))))
       (do (report-error mc T "type does not implement <")
           (return (nullptr DNode))))
  (qq do
    (def <= (fn extern bool ((a (ref (const (uq T)))) (b (ref (const (uq T)))))
      (or (< (@ a) (@ b))
          (not (< (@ b) (@ a))))))))

#|
@concept-macro >

Expands to a `>` function over the provided type. `<` must be defined
over the type before calling this macro.

@param T    The type node.
|#
(def-concept-macro > extern ((T Type))
  (and (not (exists-fn mc (qq bool < (uq T) (uq T))))
       (do (report-error mc T "type does not implement <")
           (return (nullptr DNode))))
  (qq do
    (def > (fn extern bool ((a (uq T)) (b (uq T)))
      (and (not (< a b)) (< b a))))))

(def-concept-macro > extern ((T PreferRefs))
  (and (not (exists-fn mc (qq bool < (uq T) (uq T))))
       (do (report-error mc T "type does not implement <")
           (return (nullptr DNode))))
  (qq do
    (def > (fn extern bool ((a (ref (const (uq T)))) (b (ref (const (uq T)))))
      (and (not (< (@ a) (@ b))) (< (@ b) (@ a)))))))


#|
@concept-macro >=

Expands to a `>=` function over the provided type. `<` must be defined
over the type before calling this macro.

@param T    The type node.
|#
(def-concept-macro >= extern ((T Type))
  (and (not (exists-fn mc (qq bool < (uq T) (uq T))))
       (do (report-error mc T "type does not implement <")
           (return (nullptr DNode))))
  (qq do
    (def >= (fn extern bool ((a (uq T)) (b (uq T)))
      (or (not (< a b)) (< b a))))))

(def-concept-macro >= extern ((T PreferRefs))
  (and (not (exists-fn mc (qq bool < (uq T) (uq T))))
       (do (report-error mc T "type does not implement <")
           (return (nullptr DNode))))
  (qq do
    (def >= (fn extern bool ((a (ref (const (uq T)))) (b (ref (const (uq T)))))
      (or (not (< (@ a) (@ b))) (< (@ b) (@ a)))))))

#|
@concept-macro =

Expands to a `=` function over the provided struct type. `=` must be
defined over each of the struct's member types before calling this
macro. 

@param T    The struct type node.
|#

(def-concept-macro = extern ((T Struct))
  (let ((n int (struct-member-count mc T))
        (holder-node  (p DNode) (make-node mc))
        (null-node    (p DNode) (cast 0 (p DNode)))
        (current-node (p DNode) null-node))
    (prefer-ref-bindings (uq T) 1)

    (and (= n 0)
         (do (report-error mc T "struct has no members")
             (return (mnfv mc "0"))))

    (setf-dsref-mul
      holder-node (is-list   1)
                  (list-node null-node)
                  (next-node null-node))

    (for (i \ 0) (< i n) (incv i)
      (let ((name (p DNode) (mnfv mc (struct-member-name mc T i)))
            (type (p DNode) (struct-member-type mc T i)))

        (and (not (exists-fn mc (qq bool = (uq type) (uq type))))
             (let ((stc (array-of 255 char))
                   (ts  (array-of 255 char)))
               (setf ($ ts 0) #\NULL)
               (if (not (type-to-string mc type ts))
                   (sprintf ts "(unknown type)")
                   0)
               (sprintf stc 
                        "= not defined on struct member (type %s, name %s)" 
                        ts (@:@ name token-str))
               (report-error mc T stc)
               (return (mnfv mc "0"))))

        (let ((part (p DNode) 
                    (qq and (= (@ (: ((uq tvw-1) a) (uq name)))
                                (@ (: ((uq tvw-1) b) (uq name)))))))
          (if (not (null current-node))
              (do (setf (:@ current-node next-node) part)
                  (setv current-node (get-last-node (@:@ part list-node))))
              (do (setv current-node (get-last-node (@:@ part list-node)))
                  (setf (:@ holder-node list-node) (@:@ part list-node)))))))

    (setf (:@ current-node next-node) (mnfv mc "true"))

    (setv holder-node
      (qq def = (fn extern bool ((a ((uq tpw-1) (uq T)))
                                  (b ((uq tpw-1) (uq T))))
        (uq holder-node))))

    (return holder-node)))

#|
@concept-macro <

Expands to a `<` function over the provided struct type. `<` must be
defined over each of the struct's member types before calling this
macro. 

@param T    The struct type node.
|#
(def-concept-macro < extern ((T Struct))
  (let ((n int (struct-member-count mc T))
        (holder-node  (p DNode) (make-node mc))
        (null-node    (p DNode) (cast 0 (p DNode)))
        (current-node (p DNode) null-node))
    (prefer-ref-bindings (uq T) 1)

    (and (= n 0)
         (do (report-error mc T "struct has no members")
             (return (mnfv mc "0"))))

    (setf-dsref-mul 
      holder-node (is-list   1)
                  (list-node null-node)
                  (next-node null-node))
      
    (for (i \ 0) (< i n) (incv i)
      (let ((name (p DNode) (mnfv mc (struct-member-name mc T i)))
            (type (p DNode) (struct-member-type mc T i)))
        
        (and (not (exists-fn mc (qq bool < (uq type) (uq type))))
             (let ((stc (array-of 255 char))
                   (ts  (array-of 255 char)))
               (setf ($ ts 0) #\NULL)
               (if (not (type-to-string mc type ts))
                   (sprintf ts "(unknown type)")
                   0)
               (sprintf stc 
                        "< not defined on struct member (type %s, name %s)" 
                        ts (@:@ name token-str))
               (report-error mc T stc)
               (return (mnfv mc "0"))))

        (let ((part (p DNode) 
                    (qq or (< (@ (: ((uq tvw-1) a) (uq name)))
                               (@ (: ((uq tvw-1) b) (uq name)))))))
          (if (not (null current-node))
              (do (setf (:@ current-node next-node) part)
                  (setv current-node (get-last-node (@:@ part list-node))))
              (do (setv current-node (get-last-node (@:@ part list-node)))
                  (setf (:@ holder-node list-node) (@:@ part list-node)))))))

    (setf (:@ current-node next-node) (mnfv mc "false"))

    (setv holder-node
      (qq def < (fn extern bool ((a ((uq tpw-1) (uq T)))
                                  (b ((uq tpw-1) (uq T))))
        (uq holder-node))))

    (return holder-node)))

#|
@concept-macro relations

Expands to `=`, `!=`, `<`, `<=`, `>` and `>=` functions over the
provided struct type. Any that have already been defined are skipped.

@param T    The struct type node.
|#
(def-concept-macro relations extern ((T Type))
  (let ((n=  (p DNode) (if (not (exists-fn mc (qq bool = (uq T) (uq T))))
                 (qq std.concepts.instantiate = (uq T))
                 (qq no-op)))
        (n!= (p DNode) (if (not (exists-fn mc (qq bool != (uq T) (uq T))))
                 (qq std.concepts.instantiate != (uq T))
                 (qq no-op)))
        (n< (p DNode) (if (not (exists-fn mc (qq bool < (uq T) (uq T))))
                 (qq std.concepts.instantiate < (uq T))
                 (qq no-op)))
        (n<= (p DNode) (if (not (exists-fn mc (qq bool <= (uq T) (uq T))))
                 (qq std.concepts.instantiate <= (uq T))
                 (qq no-op)))
        (n> (p DNode) (if (not (exists-fn mc (qq bool > (uq T) (uq T))))
                 (qq std.concepts.instantiate > (uq T))
                 (qq no-op)))
        (n>= (p DNode) (if (not (exists-fn mc (qq bool >= (uq T) (uq T))))
                 (qq std.concepts.instantiate >= (uq T))
                 (qq no-op))))
      (qq do (uq n=) (uq n!=) (uq n<) (uq n<=) (uq n>) (uq n>=))))

))
