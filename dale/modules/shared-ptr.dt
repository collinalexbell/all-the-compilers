#|
@module shared-ptr

A simple shared pointer module. Apart from the `SharedPtr` macro and
concept macro, the documentation in this module is for a generated
shared pointer instance of type `T`.

|#
(module shared-ptr)

(import unistd)
(import macros)
(import cstdio)
(import assert)
(import utility)
(import concepts)

(using-namespace std.macros
(using-namespace std.concepts

#|
@macro SharedPtr

Expands to the concrete type name of the `SharedPtr` generated by way
of the concept macro.

@param T    The type node.
|#
(def SharedPtr
  (macro extern (T)
    (let ((typename   (array-of 255 char))
          (structname (array-of 255 char)))
      (make-type-string mc "sharedptr" T typename)
      (mnfv mc typename))))

(def core-@:@
  (macro extern (sname sfield)
    (qq core @ (: (core @ (uq sname)) (uq sfield)))))

#|
@concept-macro SharedPtr

Expands to a `SharedPtr` definition over the relevant type.

@param T    The type node.
|#
(def-concept-macro SharedPtr extern ((T Type))
  (let ((typename    (array-of 255 char))
        (structname  (array-of 255 char))
        (snnode      (p DNode)))

    (make-type-string mc "sharedptr" T structname)
    (make-type-display-string mc "SharedPtr" T typename)
    (setv snnode (mnfv mc structname))
    (register-type mc structname typename)

    (qq do

    #|
    @struct (SharedPtr T)

    The core shared pointer structure type.
    
    |#
    (def (uq snnode)
      (struct extern ((pointer  (p (uq T)))
                      (refcount (p int)))))

    #|
    @fn init

    Initialise the shared pointer structure with a pointer. Once the
    structure has been initialised with the pointer, it takes
    ownership of it. The structure assumes that the pointer was
    created by way of malloc.

    @param loc      The shared pointer.
    @param-type     (p (SharedPtr T))
    @param value    The value to assign to the shared pointer.
    @param-type     (p T)
    @linkage        extern
    @return-type    bool
    |#
    (def init
      (fn extern bool ((loc   (ref (SharedPtr (uq T))))
                       (value (p (uq T))))
        (let ((newint (p int) (cast (malloc (sizeof int)) (p int))))
          (setf newint 1)
          (setf (:@ loc pointer)  value)
          (setf (:@ loc refcount) newint)
          true)))

    #|
    @fn init

    Initialise an empty/null shared pointer structure.

    @param loc      The shared pointer.
    @param-type     (p (SharedPtr T))
    @linkage        extern
    @return-type    bool
    |#
    (def init
      (fn extern bool ((loc (ref (SharedPtr (uq T)))))
        (setf (:@ loc pointer)  (nullptr (uq T)))
        (setf (:@ loc refcount) (nullptr int))
        true))

    (def destroy
      (fn extern void ((val (ref (SharedPtr (uq T)))))
        (and (or (null val) (or (null (@:@ val pointer))
                                (null (@:@ val refcount))))
             (return))
        (setf (@:@ val refcount)
              (- (@ (@:@ val refcount)) 1))
        (if (= (@ (@:@ val refcount)) 0)
            (do (destroy (@ (core-@:@ val pointer)))
                (free' (core-@:@ val pointer))
                (free' (@:@ val refcount))
                0)
            0)
        (return)))

    #|
    @fn get

    Returns the underlying pointer.

    @param loc      The shared pointer.
    @param-type     (p (SharedPtr T))
    @linkage        extern
    @return-type    (p T)
    |#
    (def get
      (fn extern (p (uq T)) ((mloc (SharedPtr (uq T))))
        (@: mloc pointer)))

    #|
    @fn @

    Dereferencing the shared pointer returns the value from the
    underlying pointer.

    @param loc      The shared pointer.
    @param-type     (p (SharedPtr T))
    @linkage        extern
    @return-type    T
    |#
    (def @
      (fn extern (uq T) ((mloc (SharedPtr (uq T))))
        (@ (@: mloc pointer))))

    (def setf-copy-assign
      (fn extern bool ((loc (p (SharedPtr (uq T))))
                       (val (uq T)))
        (do (setf (core-@:@ loc pointer) val) 0)
        false))

    (def setf-copy-init
      (fn extern bool ((loc (p (SharedPtr (uq T))))
                       (val (uq T)))
        false))

    (def setf-copy-assign
      (fn extern bool ((loc (p (SharedPtr (uq T))))
                       (val (p (SharedPtr (uq T)))))
        (and (not (p= (core @ (: (core @ loc) pointer))
                      (core @ (: (core @ val) pointer))))
             (do (destroy (@ loc))
                 (setf (core-@:@ val refcount)
                       (+ (core @ (core-@:@ val refcount)) 1))))
        (core setf (: (core @ loc) pointer)  
                   (@ (: (core @ val) pointer)))
        (core setf (: (core @ loc) refcount) 
                   (@ (: (core @ val) refcount)))
        true))

    (def setf-copy-init
      (fn extern bool ((loc (p (SharedPtr (uq T))))
                       (val (p (SharedPtr (uq T)))))
        (setf (core-@:@ val refcount)
              (+ (core @ (core-@:@ val refcount)) 1))
        (core setf (: (core @ loc) pointer)  
                   (@ (: (core @ val) pointer)))
        (core setf (: (core @ loc) refcount) 
                   (@ (: (core @ val) refcount)))
        true)))))))
