#|
@module unique-ptr

A unique pointer module. Apart from the `UniquePtr` macro and concept
macro, the documentation in this module is for a generated unique
pointer instance of type `T`.

|#
(module unique-ptr)

(import unistd)
(import macros)
(import cstdio)
(import assert)
(import utility)
(import concepts)

(using-namespace std.macros
(using-namespace std.concepts

#|
@macro UniquePtr

Expands to the concrete type name of the `UniquePtr` generated by way
of the concept macro.

@param T    The type node.
|#
(def UniquePtr
  (macro extern (T)
    (let ((typename   (array-of 255 char))
          (structname (array-of 255 char)))
      (make-type-string mc "uniqueptr" T typename)
      (mnfv mc typename))))

(def core-@:@
  (macro extern (sname sfield)
    (qq core @ (: (core @ (uq sname)) (uq sfield)))))

#|
@concept-macro UniquePtr

Expands to a `UniquePtr` definition over the relevant type.

@param T    The type node.
|#
(def-concept-macro UniquePtr extern ((T Type))
  (let ((typename    (array-of 255 char))
        (structname  (array-of 255 char))
        (snnode      (p DNode)))

    (make-type-string mc "uniqueptr" T structname)
    (make-type-display-string mc "UniquePtr" T typename)
    (setv snnode (mnfv mc structname))
    (register-type mc structname typename)

    (qq do

    (using-namespace std.macros
    (using-namespace std.concepts

    #|
    @struct (UniquePtr T)

    The core unique pointer structure type.

    |#
    (def (uq snnode)
      (struct extern ((pointer (p (uq T))))))

    (implement Type (UniquePtr (uq T)))
    (implement Struct (UniquePtr (uq T)))
    (implement PreferRefs (UniquePtr (uq T)))

    #|
    @fn init

    Initialise the unique pointer structure with a pointer. Once the
    structure has been initialised with the pointer, it takes
    ownership of it. The structure assumes that the pointer was
    created by way of malloc.

    @param loc      The unique pointer.
    @param-type     (p (UniquePtr T))
    @param value    The value to assign to the unique pointer.
    @param-type     (p T)
    @linkage        extern
    @return-type    bool
    |#
    (def init
      (fn extern bool ((loc   (ref (UniquePtr (uq T))))
                       (value (p (uq T))))
        (setf (:@ loc pointer) value)
        true))

    #|
    @fn init

    Initialise an empty/null unique pointer structure.

    @param loc      The unique pointer.
    @param-type     (p (UniquePtr T))
    @linkage        extern
    @return-type    bool
    |#
    (def init
      (fn extern bool ((loc (ref (UniquePtr (uq T)))))
        (setf (:@ loc pointer) (nullptr (uq T)))
        true))

    (def destroy
      (fn extern void ((val (ref (UniquePtr (uq T)))))
        (if (not (null (@:@ val pointer)))
            (do (destroy (@ (core-@:@ val pointer)))
                (free' (core-@:@ val pointer))
                0)
            0)
        (return)))

    #|
    @fn get

    Returns the underlying pointer.

    @param loc      The unique pointer.
    @param-type     (p (UniquePtr T))
    @linkage        extern
    @return-type    (p T)
    |#
    (def get
      (fn extern (p (uq T)) ((mloc (ref (UniquePtr (uq T)))))
        (@:@ mloc pointer)))

    #|
    @fn @

    Dereferencing the unique pointer returns the value from the
    underlying pointer.

    @param loc      The unique pointer.
    @param-type     (p (UniquePtr T))
    @linkage        extern
    @return-type    T
    |#
    (def @
      (fn extern (uq T) ((mloc (ref (UniquePtr (uq T)))))
        (@ (@:@ mloc pointer))))

    (def setf-copy-disabled (fn extern bool ((v (UniquePtr (uq T))))))

    (def setf-move-init
      (fn extern bool ((dst (p (UniquePtr (uq T))))
                       (src (rv-ref (UniquePtr (uq T)))))
        (core setf (: (core @ dst) pointer)
                   (@ (: (core @ src) pointer)))
        (core setf (: (core @ src) pointer)
	           (nullptr (uq T)))
        true))

    (def setf-move-assign
      (fn extern bool ((dst (p (UniquePtr (uq T))))
                       (src (rv-ref (UniquePtr (uq T)))))
        (and (p= dst src)
             (return true))
        (if (not (null (@:@ dst pointer)))
            (do (destroy (@ dst))
                0)
            0)
        (core setf (: (core @ dst) pointer)
                   (@ (: (core @ src) pointer)))
        (core setf (: (core @ src) pointer)
	           (nullptr (uq T)))
        true)))))))))
