#|
@module bitset-enum

Provides `def-bitset-enum`, which allows for defining bitset enums.
These operate in the same way as normal enums, except that the
sequence goes 0, 1, 2, 4, ..., with each successive value being twice
that of the previous one.  For example,

        (def-bitset-enum my-enum intern int (a b c d))

expands to:

        (def-enum my-enum intern int ((a 0) (b 1) (c 2) (d 4)))

and

        (def-bitset-enum my-enum intern int ((a 0x2) b c d))

expands to:

        (def-enum my-enum intern int ((a 0x2) (b 0x4) (c 0x8) (d 0x10)))

|#
(module bitset-enum)

(import stdlib)
(import cstdlib)
(import macros)
(import introspection)
(import enum)

#|
@macro def-bitset-enum

@param name     The name of the new enum.
@param linkage  The linkage for the new enum.
@param type     The type for the new enum.
@param forms    The elements for the new enum.
|#
(def def-bitset-enum
  (macro extern (name linkage type forms)
    (using-namespace std.macros
      (def forms-list (var auto \ (@:@ forms list-node)))
      (and (null forms-list)
        (do (report-error mc forms "list required for enum forms")
            (return (nullptr DNode))))
      (def holder  (var auto (p DNode) (nullptr DNode)))
      (def current (var auto (p DNode) (nullptr DNode)))
      (for (i uint64 0)
           (not (null forms-list))
           (do (setv forms-list (@:@ forms-list next-node))
               (setv i (if (=' i 0) (cast 1 uint64) (<< i 1))))
        (def name-node (var auto \ forms-list))
        (def name-list-node (var auto \ (@:@ name-node list-node)))
        (and (not (null name-list-node))
          (let ((new-num-node \ (@:@ name-list-node next-node)))
            (setv name-node name-list-node)
            (and (null new-num-node)
              (do (report-error mc forms
                                "two arguments required for enum element form")
                  (return (nullptr DNode))))
            (let ((value \ (@:@ new-num-node token-str)))
              (and (null value)
                (do (report-error mc forms
                                  "atom required for enum element index")
                    (return (nullptr DNode))))
              (setv i (strtoui64 value
                                 (nullptr (p char))
                                 (if (and (= #\0 (@$ value 0))
                                          (= #\x (@$ value 1)))
                                     16
                                     10)))
              (and (=' i 0)
                (do (report-error mc new-num-node
                                  "invalid enum element index")
                    (return (nullptr DNode)))))))
        (let ((num-node \ (mnfv mc i))
              (new-form \ (qq (uq name-node) (uq num-node))))
          (if (null holder)
              (do (setv holder new-form)
                  (setv current new-form))
              (do (setf (:@ current next-node) new-form)
                  (setv current new-form)))))
      (def wrapper (var auto (p DNode) (qq (uql holder))))
      (qq def-enum (uq name) (uq linkage) (uq type) (uq wrapper)))))
