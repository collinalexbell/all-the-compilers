#|
@module algorithms

Provides concept macros for generating algorithm functions.

|#
(module algorithms (attr cto))

(import macros)
(import concepts)
(import utility)

(using-namespace std.macros
(using-namespace std.concepts

(def assert-concept (macro extern (T C)
  (qq
    and (has-errors mc (qq std.concepts.implements (uq T) (uq C)))
      (return (qq std.concepts.implements (uq T) (uq C))))))

#|
@macro Predicate

Expands to a function pointer type that takes the `value-type` of the
corresponding type argument and returns a `bool`. This name is used as
shorthand in this module's documentation.

@param T    The type node.
|#
(def Predicate (macro extern (T)
  (qq do (p (fn bool ((i (value-type (nullptr (uq T))))))))))

#|
@macro RefPredicate

Like `Predicate`, except the function pointer type takes a const reference.

@param T    The type node.
|#
(def RefPredicate (macro extern (T)
  (qq do (p (fn bool ((i (ref (const (value-type (nullptr (uq T))))))))))))

#|
@macro Action

Expands to a function pointer type that takes the `value-type` of the
corresponding type argument and returns `void`. This name is used as
shorthand in this module's documentation.

@param T    The type node.
|#
(def Action (macro extern (T)
  (qq do (p (fn void ((i (value-type (nullptr (uq T))))))))))

#|
@macro RefAction

Like `Action`, except the function pointer takes a reference.

@param T    The type node.
|#
(def RefAction (macro extern (T)
  (qq do (p (fn void ((i (ref (value-type (nullptr (uq T)))))))))))

#|
@concept-macro find

Expands to a function that accepts two of the provided iterator types
and an instance of the iterator type's `value-type`. On calling that
function, if the value is found in the range, the iterator containing
the value is returned. Otherwise, the second argument iterator is
returned.

@param Ti   The iterator type.
|#
(def-concept-macro find extern ((Ti InputIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (qq do
    (def find (fn extern (uq Ti)
                         ((begin  (uq Ti))
                          (end    (uq Ti))
                          (fvalue ((uq tpw-ro-1) (value-type (nullptr (uq Ti))))))
      (for true (!= begin end) (setv begin (successor begin))
        (and (= ((uq tvw-ro-1) fvalue) (@ (source begin)))
             (return begin)))
      (return end)))))

#|
@concept-macro find-if

Expands to a function that accepts two of the provided iterator types
and a `Predicate`. On calling that function, if a value satisfying the
predicate is found in the range, the iterator containing that value is
returned. Otherwise, the second argument iterator is returned.

@param Ti   The iterator type.
|#
(def-concept-macro find-if extern ((Ti InputIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (def P (var auto (p DNode) (mnfv mc (if prefer-refs-1 "RefPredicate"
                                                        "Predicate"))))
  (qq do
    (def find-if (fn extern (uq Ti)
                            ((begin (uq Ti))
                             (end   (uq Ti))
                             (pred  ((uq P) (uq Ti))))
      (for true (!= begin end) (setv begin (successor begin))
        (and (pred (@ (source begin)))
             (return begin)))
      (return end)))))

#|
@concept-macro find-if-not

Expands to a function that accepts two of the provided iterator types
and a `Predicate`. On calling that function, if a value that does not
satisfy the predicate is found in the range, the iterator containing
that value is returned. Otherwise, the second argument iterator is
returned.

@param Ti   The iterator type.
|#
(def-concept-macro find-if-not extern ((Ti InputIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (def P (var auto (p DNode) (mnfv mc (if prefer-refs-1 "RefPredicate"
                                                        "Predicate"))))
  (qq do
    (def find-if-not (fn extern (uq Ti)
                                ((begin (uq Ti))
                                 (end   (uq Ti))
                                 (pred  ((uq P) (uq Ti))))
      (for true (!= begin end) (setv begin (successor begin))
        (and (not (pred (@ (source begin))))
             (return begin)))
      (return end)))))

#|
@concept-macro sort

Expands to a function that accepts two of the provided iterator types.
On calling that function, the corresponding range is sorted. (The
implementation here needs some work, because the resulting function is
pretty slow.)

@param Ti   The iterator type.
|#
(def-concept-macro sort extern ((Ti RandomAccessIterator))
  (assert-concept (uq Ti) OutputIterator)
  (assert-concept (value-type (nullptr (uq Ti))) LessThanComparable)
  (assert-concept (value-type (nullptr (uq Ti))) Swappable)
  (qq do
    (def sort-partition
      (fn extern (uq Ti) ((begin (uq Ti))
                          (end   (uq Ti))
                          (pivot (uq Ti)))
        (let ((right      (uq Ti) (- end (cast 1 size)))
              (storep     (uq Ti) begin))
          (swap (@ (source pivot)) (@ (source right)))
          (while (<= begin (- right (cast 1 size)))
            (if (<= (@ (source begin)) (@ (source right)))
                (do (swap (@ (source storep)) (@ (source begin)))
                    (setv storep (successor storep))
                    0)
                0)
            (setv begin (successor begin)))
          (swap (@ (source storep)) (@ (source right)))
          (return storep))))

    (def sort
      (fn extern void ((begin (uq Ti))
                       (end   (uq Ti)))
        (if (and (not (= end begin))
                 (and (not (= (successor begin) end))
                      (> end begin)))
            (let ((pivot (uq Ti)
                         (+ begin 
                            (- (/ (distance end begin)
                                  (cast 2 size))
                               (cast 1 size)))))
              (setv pivot (sort-partition begin end pivot))
              (sort begin pivot)
              (sort (+ pivot (cast 1 size)) end)
              (return))
            (return))))))

#|
@concept-macro for-each

Expands to a function that accepts two of the provided iterator types
and an `Action`. On calling that function, the action is run against
each value in the range.

@param Ti   The iterator type.
|#
(def-concept-macro for-each extern ((Ti InputIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (def A (var auto (p DNode) (mnfv mc (if prefer-refs-1 "RefAction"
                                                        "Action"))))
  (qq do
    (def for-each (fn extern void ((begin (uq Ti))
                                   (end   (uq Ti))
                                   (ac    ((uq A) (uq Ti))))
      (for true (!= begin end) (setv begin (successor begin))
        (ac (@ (source begin))))
      (return)))))

#|
@concept-macro lower-bound

Expands to a function that accepts two of the provided iterator types
and a `value-type`. On calling that function, returns the position of
the first value in the range that is not less than the provided value.
The function assumes that the range is sorted.

@param Ti   The iterator type.
|#
(def-concept-macro lower-bound extern ((Ti RandomAccessIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (assert-concept (value-type (nullptr (uq Ti))) LessThanComparable)
  (qq do    
    (def lower-bound 
      (fn extern (uq Ti) ((b (uq Ti))
                          (e (uq Ti))
                          (v ((uq tpw-ro-1) (value-type (nullptr (uq Ti))))))
        (let ((count \ (distance b e))
              (step  size)
              (it    (uq Ti)))
          (while (> count (cast 0 size))
            (setv it b)
            (setv step (/ count (cast 2 size)))
            (setv it (+ it step))
            (if (< (@ (source it)) ((uq tvw-ro-1) v))
                (do (setv it (successor it))
                    (setv b it)
                    (setv count (- count (+ step (cast 1 size))))
                    0)
                (do (setv count step)
                    0)))
          b)))))

#|
@concept-macro upper-bound

Expands to a function that accepts two of the provided iterator types
and a `value-type`. On calling that function, returns the position of
the first value in the range that is greater than the provided value.
The function assumes that the range is sorted.

@param Ti   The iterator type.
|#
(def-concept-macro upper-bound extern ((Ti RandomAccessIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (assert-concept (value-type (nullptr (uq Ti))) LessThanComparable)
  (qq do
    (def upper-bound
      (fn extern (uq Ti) ((b (uq Ti))
                          (e (uq Ti))
                          (v ((uq tpw-ro-1) (value-type (nullptr (uq Ti))))))
        (let ((count \ (distance b e))
              (step  size)
              (it    (uq Ti)))
          (while (> count (cast 0 size))
            (setv it b)
            (setv step (/ count (cast 2 size)))
            (setv it (+ it step))
            (if (not (< ((uq tvw-ro-1) v) (@ (source it))))
                (do (setv it (successor it))
                    (setv b it)
                    (setv count (- count (+ step (cast 1 size))))
                    0)
                (do (setv count step)
                    0)))
          b)))))

#|
@concept-macro binary-search

Expands to a function that accepts two of the provided iterator types
and a `value-type`. On calling that function, returns a boolean
indicating whether the value is present in the range. The function
assumes that the range is sorted.

@param Ti   The iterator type.
|#
(def-concept-macro binary-search extern ((Ti RandomAccessIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (assert-concept (value-type (nullptr (uq Ti))) LessThanComparable)
  (qq do
    (def binary-search
      (fn extern bool ((b (uq Ti))
                       (e (uq Ti))
                       (v ((uq tpw-ro-1) (value-type (nullptr (uq Ti))))))
        (setv b (lower-bound b e ((uq tvw-ro-1) v)))
        (and (not (= b e))
             (not (< ((uq tvw-ro-1) v) (@ (source b)))))))))

#|
@concept-macro equal-range

Expands to a function that accepts two of the provided iterator types
and a `value-type`. It also instantiates a `Pair` type over the
iterator type, if required. On calling that function, it returns a
`Pair` containing the `lower-bound` and `upper-bound` iterators for
the value.

@param Ti   The iterator type.
|#
(def-concept-macro equal-range extern ((Ti RandomAccessIterator))
  (prefer-ref-bindings (value-type (nullptr (uq Ti))) 1)
  (qq do
    (std.concepts.instantiate Pair (uq Ti) (uq Ti))
    (def equal-range
      (fn extern (Pair (uq Ti) (uq Ti)) ((b (uq Ti))
                                         (e (uq Ti))
                                         (v ((uq tpw-ro-1) (value-type (nullptr (uq Ti))))))
        (let ((it (uq Ti) (lower-bound b e ((uq tvw-ro-1) v)))
              (pr (Pair (uq Ti) (uq Ti))))
          (setf (: pr first)  it)
          (setf (: pr second) (upper-bound it e ((uq tvw-ro-1) v)))
          pr)))))

#|
@concept-macro max

Expands to a function that takes two values of the specified type. If
the first value is greater than the second value, then the first is
returned. Otherwise, the second is returned. Does not support types
that do not permit copying.

@param T    The type node.
|#
(def-concept-macro max extern ((T Type))
  (if (exists-fn mc (qq (uq T) max (uq T) (uq T)))
      (return (nullptr DNode))
      0)
  (assert-concept (uq T) LessThanComparable)
  (qq do
    (def max (fn extern (uq T) ((a (uq T)) 
                                (b (uq T)))
      (if (> a b) a b)))))

(def-concept-macro max extern ((T PreferRefs))
  (if (exists-fn mc (qq (uq T) max (uq T) (uq T)))
      (return (nullptr DNode))
      0)
  (assert-concept (uq T) LessThanComparable)
  (qq do
    (def max (fn extern (retval (uq T)) ((a (ref (const (uq T))))
                                         (b (ref (const (uq T)))))
      (if (> (@ a) (@ b))
          (setf retval (@ a))
          (setf retval (@ b)))
      (return)))))

#|
@concept-macro min

Expands to a function that takes two values of the specified type. If
the first value is less than than the second value, then the first is
returned. Otherwise, the second is returned. Does not support types
that do not permit copying.

@param T    The type node.
|#
(def-concept-macro min extern ((T Type))
  (if (exists-fn mc (qq (uq T) min (uq T) (uq T)))
      (return (nullptr DNode))
      0)
  (assert-concept (uq T) LessThanComparable)
  (qq do
    (def min (fn extern (uq T) ((a (uq T)) 
                                (b (uq T)))
      (if (< a b) a b)))))

(def-concept-macro min extern ((T PreferRefs))
  (if (exists-fn mc (qq (uq T) min (uq T) (uq T)))
      (return (nullptr DNode))
      0)
  (assert-concept (uq T) LessThanComparable)
  (qq do
    (def min (fn extern (retval (uq T)) ((a (ref (const (uq T))))
                                         (b (ref (const (uq T)))))
      (if (< (@ a) (@ b))
          (setf retval (@ a))
          (setf retval (@ b)))
      (return)))))

#|
@concept-macro copy

Takes input and output iterator types as its arguments. Expands to a
function that takes two of the input iterators and an output iterator.
That function iterates over the provided range, sinking values into
the output iterator at each step.

@param Ti   The input iterator type.
@param To   The output iterator type.
|#
(def-concept-macro copy extern ((Ti InputIterator)
                                (To OutputIterator))
  (qq do
    (def copy
      (fn extern (uq To) ((from-begin (uq Ti))
                          (from-end   (uq Ti))
                          (to-begin   (uq To)))
        (while (< from-begin from-end)
          (sink to-begin   (@ (source from-begin)))
          (setv from-begin (successor from-begin))
          (setv to-begin   (successor to-begin)))
        to-begin))))

#|
@concept-macro assign

Takes a container type and an input iterator type as its arguments.
Expands to a function that takes a container value and two input
iterators as its arguments. That function clears the container, and
then copies each element from the range formed by the input iterators
into the cleared container.

@param Tc   The container type.
@param Ti   The input iterator type.
|#
(def-concept-macro assign extern ((Tc BackInsertionSequence)
                                  (Ti InputIterator))
  (qq do
    (def assign
      (fn extern bool ((obj   (ref (uq Tc)))
                       (begin (uq Ti))
                       (end   (uq Ti)))
        (clear (@ obj))
        (for true (!= begin end) (setv begin (successor begin))
          (push-back (@ obj) (@ (source begin))))
        true))))

(def-concept-macro foldl_ extern ((Ti InputIterator)
                                  (V Type))
  (qq do
    (def foldl
      (fn extern (uq V)
                 ((fun (p (fn (uq V)
                              ((a (const (uq V)))
                               (b (const (uq V)))))))
                  (init (const (uq V)))
                  (begin (uq Ti))
                  (end (uq Ti)))
        (def current (var auto (uq V) init))
        (while (!= begin end)
          (setv current (funcall fun current (@ (source begin))))
          (setv begin (successor begin)))
        current))))

(def-concept-macro foldl_ extern ((Ti InputIterator)
                                  (V PreferRefs))
  (qq do
    (def foldl
      (fn extern (retval (uq V))
                 ((fun (p (fn (retval (uq V))
                              ((a (ref (const (uq V))))
                               (b (ref (const (uq V))))))))
                  (init (ref (const (uq V))))
                  (begin (uq Ti))
                  (end (uq Ti)))
        (setf retval (@ init))
        (while (!= begin end)
          (setf retval (funcall fun (@ retval) (@ (source begin))))
          (setv begin (successor begin)))
        (return)))))

#|
@concept-macro foldl

Takes an input iterator type as its arguments.  Expands to a fold-left
function that takes a binary operation function pointer, an initial
value, and a pair of input iterators as its arguments.  Does not
support types that do not permit copying.

@param Ti   The input iterator type.
|#
(def-concept-macro foldl extern ((Ti InputIterator))
  (qq do
    (std.concepts.instantiate foldl_ (uq Ti) (value-type (nullptr (uq Ti))))))

#|
@concept-macro =

Takes a container type as its argument. Expands to a function that
takes two container pointers and returns a boolean indicating whether
the elements of those containers match.

@param Tc   The container type.
|#
(def-concept-macro = extern ((Tc Container))
  (assert-concept (value-type (nullptr (uq Tc))) EqualityComparable)
  (qq do
    (def = (fn extern bool ((c1 (ref (uq Tc)))
                            (c2 (ref (uq Tc))))
      (and (!= (size (@ c1)) (size (@ c2)))
           (return false))
      (let ((b1 \ (begin (@ c1)))
            (b2 \ (begin (@ c2)))
            (e1 \ (end (@ c1)))
            (e2 \ (end (@ c2))))
        (for true (!= b1 e1) (do (setv b1 (successor b1))
                                 (setv b2 (successor b2)))
          (and (not (= (@ (source b1)) (@ (source b2))))
               (return false)))
      true)))))

#|
@concept-macro <

Takes a container type as its argument. Expands to a function that
takes two container pointers and returns a boolean indicating whether
the first container is 'less than' the second. This will be so when:

  * the first element of the first container that is not equal to the
    element at the same position in the second container compares as
    less than that element; or
  * there are fewer elements in the first container than in the
    second.

(`<` is defined over pointers to containers, rather than container
values, for the same reasons as `=`).

@param Tc   The container type.
|#
(def-concept-macro < extern ((Tc Container))
  (assert-concept (value-type (nullptr (uq Tc))) LessThanComparable)
  (qq do
    (def < (fn extern bool ((c1 (ref (uq Tc)))
                            (c2 (ref (uq Tc))))
      (and (< (size (@ c1)) (size (@ c2)))
           (return true))
      (let ((b1 \ (begin (@ c1)))
            (b2 \ (begin (@ c2)))
            (e1 \ (end (@ c1)))
            (e2 \ (end (@ c2))))
        (for true (!= b1 e1) (do (setv b1 (successor b1))
                                 (setv b2 (successor b2)))
          (and (!= (@ (source b1)) (@ (source b2)))
               (return (< (@ (source b1)) (@ (source b2)))))))
      true))))
))
