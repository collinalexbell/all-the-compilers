#|
@module vector

Concept macro for a vector. Apart from the `Vector` macro and concept
macro, the documentation in this module is for a generated vector
instance of type `T`.

All of the functions that take `Iterator` arguments are defined for
`ReverseIterator`s as well, notwithstanding that there is no
documentation for those instances.

The `Vector` type implements `BackInsertionSequence` and
`RandomAccessContainer`. Its iterators implement `OutputIterator` and
`RandomAccessIterator`.

|#
(module vector (attr cto))

(import cstdio)
(import macros)
(import cstdlib)
(import math)
(import concepts)
(import utility)

#|
@macro Vector

Expands to the concrete type name of the `Vector` generated by way of
the concept macro.

@param T    The type node.
|#
(def Vector
  (macro extern (T)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string mc "vector" T typename))
           (return T))
      (def n (var auto (p DNode) (std.macros.mnfv mc typename)))
      (return n))))

(using-namespace std.macros
(using-namespace std.concepts

#|
@concept-macro Vector

Expands to a `Vector` definition over the relevant type.  If `T`
implements `EqualityComparable` and/or `LessThanComparable`, the
new vector type will implement them as well.

@param T    The type node.
|#
(def-concept-macro Vector extern ((T MoveConstructible))
  (prefer-ref-bindings (uq T) 1)
  
  (let ((typename (array-of 250 char))
        (etypename (array-of 250 char)))
    ; Generate the type names and nodes, and register the main 'vector'
    ; type name.
    (and (not (make-type-string mc "vector" T typename))
         (return (nullptr DNode)))
    (and (not (make-type-display-string mc "Vector" T etypename))
         (return (nullptr DNode)))

    (def typenode (var auto (p DNode) (std.macros.mnfv mc typename)))
 
    (register-type mc typename etypename)

    (def copy-functions (var auto (p DNode)
      (if copy-disabled-1
          (qq do (def setf-copy-disabled (fn extern bool ((dst (Vector (uq T)))))))
          (qq do
            (def setf-copy-init (fn extern bool ((dst (p (Vector (uq T))))
                                                 (src (p (Vector (uq T)))))
              (init (@ dst))
              (let ((b1 \ (begin (@ src)))
                    (e1 \ (end   (@ src))))
                (for true (!= b1 e1) (setv b1 (successor b1))
                  (push-back (@ dst) (@ (source b1)))))
              true))
            (def setf-copy-assign (fn extern bool ((dst (p (Vector (uq T))))
                                                   (src (p (Vector (uq T)))))
              (clear (@ dst))
              (setf-copy-init dst src)))))))

    (def is-equality-comparable
      (var auto bool (not (has-errors mc
                                      (qq std.concepts.implements
                                          (uq T) EqualityComparable)))))
    (def is-less-than-comparable
      (var auto bool (not (has-errors mc
                                      (qq std.concepts.implements
                                          (uq T) LessThanComparable)))))

    (def equality-comparable-forms (var auto (p DNode)
        (if is-equality-comparable
            (qq do (mfor F (= !=) (instantiate F (Vector (uq T))))
                   (implement EqualityComparable (Vector (uq T))))
            (qq no-op))))
    (def less-than-comparable-forms (var auto (p DNode)
        (if is-less-than-comparable
            (qq do (mfor F (< <= > >=) (instantiate F (Vector (uq T))))
                   (implement LessThanComparable (Vector (uq T))))
            (qq no-op))))

    (qq do

    (using-namespace std.macros
    (using-namespace std.concepts
   
    (import derivations)
    (import algorithms)
    (instantiate min size)
    (instantiate max size)

    #|
    @struct (Vector T)

    The core vector structure type.

    @linkage extern
    |#
    (def (uq typenode)
      (struct extern ((first-element (p (uq T)))
                      (last-element  (p (uq T)))
                      (size          size)
                      (capacity      size))))

    #|
    @fn init

    Initialise a vector by providing a specific capacity.

    @param vecp     A vector reference.
    @param cap      The capacity of the new vector.
    |#
    (def init
      (fn extern bool ((vecp (ref (Vector (uq T)))) (cap int))
        (setf (:@ vecp first-element)
              (malloc' cap (uq T)))
        (setf (:@ vecp last-element)  (@:@ vecp first-element))
        (setf (:@ vecp size) (cast 0 size))
        (setf (:@ vecp capacity) (cast cap size))
        true))

    #|
    @fn init

    Initialise a vector.

    @param vecp     A vector reference.
    |#
    (def init
      (fn extern bool ((vecp (ref (Vector (uq T)))))
        (init (@ vecp) 0)))

    #|
    @fn empty

    Determine whether the vector is empty.

    @param vecp     A vector reference.
    |#
    (def empty
      (fn extern bool ((vecp (ref (const (Vector (uq T))))))
        (= (@:@ vecp size) (cast 0 size))))

    #|
    @fn size

    Returns the number of elements in the vector.

    @param vecp     A vector reference.
    |#
    (def size
      (fn extern (const size) ((vecp (ref (const (Vector (uq T))))))
        (@:@ vecp size)))

    #|
    @fn max-size

    Returns the number of elements that can be accommodated by the
    vector.

    @param vecp     A vector reference.
    |#
    (def max-size
      (fn extern size ((vecp (ref (const (Vector (uq T))))))
        (- (cast 0 size) (cast 1 size))))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the vector.
    This only uses the type node for dispatch purposes, so it's safe
    to call this with e.g. `(nullptr (Vector T))` as the argument.

    @param vecp     A type node.
    |#
    (def value-type
      (macro extern ((vecp (p (Vector (uq T)))))
        (qq do (uq T))))

    #|
    @macro size-type

    Expands to the underlying size type of the vector.

    @param vecp     A type node.
    |#
    (def size-type
      (macro extern ((vecp (p (Vector (uq T)))))
        (qq do size)))

    #|
    @macro difference-type

    Expands to the underlying iterator difference type of the vector.

    @param vecp     A type node.
    |#
    (def difference-type
      (macro extern ((vecp (p (Vector (uq T)))))
        (qq do ptrdiff)))

    #|
    @fn front

    Returns a pointer to the value of the first element in the vector.

    @param vecp     A vector reference.
    |#
    (def front
      (fn extern (const (p (uq T))) ((vecp (ref (const (Vector (uq T))))))
        (@:@ vecp first-element)))

    #|
    @fn back

    Returns a pointer to the value of the last element in the vector.

    @param vecp     A vector reference.
    |#
    (def back
      (fn extern (const (p (uq T))) ((vecp (ref (const (Vector (uq T))))))
        (p- (@:@ vecp last-element) 1)))

    #|
    @fn pop-back

    Removes an element from the end of the vector.

    @param vecp     A vector reference.
    |#
    (def pop-back
      (fn extern void ((vecp (ref (Vector (uq T)))))
        (let ((value \ (back (@ vecp))))
          (destroy (@ value))
          (setf (:@ vecp size) (- (@:@ vecp size) (cast 1 size)))
          (setf (:@ vecp last-element)
                (p- (@:@ vecp last-element) 1))
          (return))))

    #|
    @fn resize

    Change the vector's capacity.

    @param vecp     A vector reference.
    @param cap      The new capacity for the vector.
    |#
    (def resize
      (fn extern bool ((vecp (ref (Vector (uq T)))) (new-capacity size))
        (let ((cc \ (@:@ vecp capacity))
              (cs \ (@:@ vecp size)))
          (and (= cc new-capacity)
               (return true))
          (while (< new-capacity cs)
            (pop-back (@ vecp))
            (setv cs (- cs (cast 1 size))))
          (setf (:@ vecp first-element)
                (cast (realloc (cast (@:@ vecp first-element) (p void))
                               (* (cast new-capacity size) 
                                  (sizeof (uq T)))) 
                      (p (uq T))))
          (setf (:@ vecp capacity) new-capacity)
          (setf (:@ vecp size) (min (@ (:@ vecp size)) new-capacity))
          (setf (:@ vecp last-element)
                (p+ (@ (:@ vecp first-element)) 
                    (@ (:@ vecp size))))
          true)))

    #|
    @fn reserve

    Increase the vector's capacity by the specified amount.

    @param vecp     A vector reference.
    @param extra    The amount by which the capacity should be increased.
    |#
    (def reserve
      (fn extern bool ((vecp (ref (Vector (uq T)))) (extra size))
        (resize (@ vecp) (max (cast 1 size)
                              (+ extra (@ (:@ vecp capacity)))))))

    #|
    @fn push-back

    Adds an element to the end of the vector.

    @param vecp     A vector reference.
    @param value    The value to add to the vector.
    |#
    (def push-back
      (fn extern bool ((vecp  (ref (Vector (uq T))))
                       (value ((uq tpw-1) (uq T))))
        (if (= (@:@ vecp capacity) (@:@ vecp size))
            (reserve (@ vecp) (@:@ vecp capacity))
            true)
        (setf (@:@ vecp last-element) ((uq tvw-1) value))
        (setf (:@ vecp last-element)
              (p+ (@:@ vecp last-element) 1))
        (setf (:@ vecp size) (+ (@:@ vecp size) (cast 1 size)))
        true))

    #|
    @fn $

    @param vecp     A vector reference.
    @param value    The index of the element.
    |#
    (def $
      (fn extern (p (uq T)) ((vecp (ref (const (Vector (uq T))))) (index int))
        (cast (p+ (@:@ vecp first-element) index) (p (uq T)))))

    #|
    @fn $

    @param vecp     A vector reference.
    @param value    The index of the element.
    |#
    (def $
      (fn extern (p (uq T)) ((vecp (ref (const (Vector (uq T))))) (index size))
        (cast (p+ (@:@ vecp first-element) index) (p (uq T)))))

    #|
    @struct (Iterator (Vector T))

    @linkage extern
    |#
    (def (Iterator (Vector (uq T)))
      (struct extern ((parent-vector (p (Vector (uq T))))
                      (element       (p (uq T))))))

    #|
    @fn begin

    Returns the iterator for the first vector element.

    @param vecp     A vector reference.
    |#
    (def begin
      (fn extern (Iterator (Vector (uq T))) ((vecp (ref (Vector (uq T)))))
        (def iter (var auto (Iterator (Vector (uq T)))))
        (setf (: iter parent-vector) vecp)
        (setf (: iter element) (@:@ vecp first-element))
        iter))

    #|
    @fn end

    Returns the iterator representing the end of the vector (sentinel).

    @param vecp     A vector reference.
    |#
    (def end
      (fn extern (Iterator (Vector (uq T))) ((vecp (ref (Vector (uq T)))))
        ((Iterator (Vector (uq T))) 
          ((parent-vector vecp)
           (element       (@:@ vecp last-element))))))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the iterator.

    @param iter     A type node.
    |#
    (def value-type
      (macro extern ((veciter (p (Iterator (Vector (uq T))))))
        (qq do (uq T))))

    #|
    @macro distance-type

    Expands to the underlying distance type of the iterator.

    @param iter     A type node.
    |#
    (def distance-type
      (macro extern ((veciter (p (Iterator (Vector (uq T))))))
        (qq do size)))

    #|
    @fn source

    Returns a pointer to the iterator's value.

    @param iter     An iterator.
    |#
    (def source
      (fn extern (p (uq T)) ((iter (Iterator (Vector (uq T)))))
        (@ (: iter element))))

    #|
    @fn sink

    Set the given value at the specified position in the vector.

    @param iter     An iterator.
    @param v        The new value.
    |#
    (def sink
      (fn extern bool ((iter (Iterator (Vector (uq T))))
                       (v    ((uq tpw-1) (uq T))))
        (setf (@ (: iter element)) ((uq tvw-1) v))
        true))

    #|
    @fn successor

    Returns the iterator for the position that follows the argument
    iterator.

    @param iter     An iterator.
    |#
    (def successor         
      (fn extern (Iterator (Vector (uq T))) 
                                ((iter (Iterator (Vector (uq T)))))
        (setf (: iter element)
              (p+ (@ (: iter element)) 1))
        (return iter)))

    #|
    @fn predecessor

    Returns the iterator for the position just before the argument
    iterator.

    @param iter     An iterator.
    |#
    (def predecessor
      (fn extern (Iterator (Vector (uq T))) 
                                ((iter (Iterator (Vector (uq T)))))
        (setf (: iter element)
              (p- (@ (: iter element)) 1))
        (return iter)))

    #|
    @fn =

    @param iter1    The first iterator.
    @param iter2    The second iterator.
    |#
    (def =
      (fn extern bool ((iter1 (Iterator (Vector (uq T))))
                       (iter2 (Iterator (Vector (uq T)))))
        (p= (@ (: iter1 element)) 
            (@ (: iter2 element)))))

    (implement Type (Iterator (Vector (uq T))))
    (instantiate != (Iterator (Vector (uq T))))

    #|
    @fn <

    @param iter1    The first iterator.
    @param iter2    The second iterator.
    |#
    (def <
      (fn extern bool ((iter1 (Iterator (Vector (uq T))))
                       (iter2 (Iterator (Vector (uq T)))))
        (p< (@ (: iter1 element))
            (@ (: iter2 element)))))

    (mfor F (<= > >=)
      (instantiate F (Iterator (Vector (uq T))))) 

    #|
    @fn +

    @param iter1    The first iterator.
    @param n        The number of steps to advance.
    |#
    (def +
      (fn extern (Iterator (Vector (uq T))) 
                           ((iter1 (Iterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p+ (@: iter1 element) n))
        iter1))

    #|
    @fn -

    @param iter1    The first iterator.
    @param n        The number of steps by which to move backwards.
    |#
    (def -
      (fn extern (Iterator (Vector (uq T))) 
                           ((iter1 (Iterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p- (@: iter1 element) n))
        (return iter1)))

    #|
    @fn distance

    Return the distance between the two iterators.

    @param iter1    The first iterator.
    @param iter2    The second iterator.
    |#
    (def distance
      (fn extern size ((iter1 (Iterator (Vector (uq T))))
                       (iter2 (Iterator (Vector (uq T)))))
        (cast (/ (abs (cast (p- (@: iter1 element)
                                (@: iter2 element)) size)) 
                 (cast (sizeof (uq T)) int)) size)))

    #|
    @struct (ReverseIterator (Vector T))

    @linkage extern
    |#
    (def (ReverseIterator (Vector (uq T)))
      (struct extern ((element (p (uq T))))))

    #|
    @fn rbegin

    Returns the iterator for the last vector element.

    @param vecp     A vector reference.
    |#
    (def rbegin
      (fn extern (ReverseIterator (Vector (uq T))) ((vec (ref (Vector (uq T)))))
        (let ((thing (ReverseIterator (Vector (uq T))) 
                     ((element (cast (@ (:@ vec last-element)) (p (uq T)))))))
          (if (!= (@:@ vec size) (cast 0 size))
              (do (setf (: thing element)
                        (p- (@: thing element) 1))
                  0)
              0)
          thing)))

    #|
    @fn rend

    Returns the iterator representing the beginning of the vector
    (sentinel).

    @param vecp     A vector reference.
    |#
    (def rend
      (fn extern (ReverseIterator (Vector (uq T))) ((vec (ref (Vector (uq T)))))
        (let ((thing (ReverseIterator (Vector (uq T))) 
                     ((element (cast (@ (:@ vec first-element)) (p (uq T)))))))
          thing)))

    (def value-type
      (macro extern ((veciter (p (ReverseIterator (Vector (uq T))))))
        (qq do (uq T))))

    (def distance-type
      (macro extern ((veciter (p (ReverseIterator (Vector (uq T))))))
        (qq do size)))

    (def source
      (fn extern (p (uq T)) ((iter (ReverseIterator (Vector (uq T)))))
        (@ (: iter element))))
    
    (def sink
      (fn extern bool ((iter (ReverseIterator (Vector (uq T))))
                       (v    ((uq tpw-1) (uq T))))
        (setf (@ (: iter element)) ((uq tvw-1) v))
        true))

    (def successor         
      (fn extern (ReverseIterator (Vector (uq T))) 
                    ((iter (ReverseIterator (Vector (uq T)))))
        (setf (: iter element)
              (p- (@ (: iter element)) 1))
        (return iter)))

    (def predecessor
      (fn extern (ReverseIterator (Vector (uq T))) 
                    ((iter (ReverseIterator (Vector (uq T)))))
        (setf (: iter element)
              (p+ (@ (: iter element)) 1))
        (return iter)))

    (def =
      (fn extern bool ((iter1 (ReverseIterator (Vector (uq T))))
                       (iter2 (ReverseIterator (Vector (uq T)))))
        (p= (@ (: iter1 element)) 
            (@ (: iter2 element)))))

    (implement Type (ReverseIterator (Vector (uq T))))
    (instantiate != (ReverseIterator (Vector (uq T))))

    (def <
      (fn extern bool ((iter1 (ReverseIterator (Vector (uq T))))
                       (iter2 (ReverseIterator (Vector (uq T)))))
        (p> (@ (: iter1 element)) (p- (@ (: iter2 element)) 1))))

    (mfor F (<= > >=)
      (instantiate F (ReverseIterator (Vector (uq T))))) 

    (def +
      (fn extern (ReverseIterator (Vector (uq T))) 
                           ((iter1 (ReverseIterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p+ (@ (: iter1 element)) n))
        (return iter1)))

    (def -
      (fn extern (ReverseIterator (Vector (uq T))) 
                           ((iter1 (ReverseIterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p- (@ (: iter1 element)) n))
        (return iter1)))

    (def distance
      (fn extern size ((iter1 (ReverseIterator (Vector (uq T))))
                       (iter2 (ReverseIterator (Vector (uq T)))))
        (cast (/ (abs (cast (p- (@: iter1 element)
                                (@: iter2 element)) size)) 
                 (cast (sizeof (uq T)) int)) size)))

    #|
    @fn insert

    Inserts a new element into the vector before the specified position,
    and returns the iterator for the new element.

    @param vecp     The vector reference.
    @param iter     The iterator for the position.
    @param value    The new value.
    |#
    (def insert
      (fn extern (Iterator (Vector (uq T))) 
                        ((unused (ref (const (Vector (uq T)))))
                         (iter   (Iterator (Vector (uq T))))
                         (value  ((uq tpw-1) (uq T))))
        (let ((vecp          \ (@: iter parent-vector))
              (original-iter \ iter)
              (next1         (uq T))
              (next2         (uq T)))
          (if (<= (@:@ vecp capacity) (size (@ vecp)))
              (do (let ((dist \ (distance iter (begin (@ vecp)))))
                    (reserve (@ vecp) (@:@ vecp capacity))
                    (setv iter (+ (begin (@ vecp)) dist))
                    (setv original-iter iter)
                    true))
              true)
          (if (= (cast 0 size) (size (@ vecp)))
              (do (push-back (@ vecp) ((uq tvw-1) value))
                  (return iter))
              0)
          (setf (:@ vecp size) (+ (@ (:@ vecp size)) (cast 1 size)))
          (and (!= iter (end (@ vecp)))
            (setv next2 (move (@ (source iter)))))
          (while (!= iter (end (@ vecp)))
            (setv iter (successor iter))
            (setv next1 (move (@ (source iter))))
            (sink iter (move next2))
            (setv next2 (move next1)))
          (setv iter (successor iter))
          (setf (:@ vecp last-element) (@: iter element))
          (sink original-iter ((uq tvw-1) value))
          (return (successor original-iter)))))

    #|
    @fn erase

    Remove the element at the specified position from the vector.

    @param vecp     The vector reference.
    @param iter     The iterator for the position.
    |#
    (def erase
      (fn extern (Iterator (Vector (uq T))) 
                        ((unused (ref (const (Vector (uq T)))))
                         (iter   (Iterator (Vector (uq T)))))
        (let ((value \ (@: iter element))
              (nn    (Iterator (Vector (uq T))))
              (nn2   (Iterator (Vector (uq T))))
              (vecp  \ (@: iter parent-vector)))
          (if (= iter (end (@ vecp)))
              (return iter)
              0)
          (setf (:@ vecp size) (- (@ (:@ vecp size)) (cast 1 size)))
          (setv nn (successor iter))
          (setv nn2 iter)
          (if (= nn (end (@ vecp)))
              (do (destroy (@ value))
                  (setf (:@ vecp last-element) (@: nn2 element))
                  (return iter))
              0)
          (while (!= nn (end (@ vecp)))
            (sink nn2 (move (@ (source nn))))
            (setv nn2 (successor nn2))
            (setv nn  (successor nn)))
          (setf (:@ vecp last-element)
                (p- (@:@ vecp last-element) 1))
          (return iter))))

    #|
    @fn clear

    Remove all of the elements from the vector.

    @param vecp     The vector reference.
    |#
    (def clear
      (fn extern bool ((vecp (ref (Vector (uq T)))))
        (while (not (empty (@ vecp)))
          (pop-back (@ vecp)))
        true))

    #|
    @fn swap

    @param vec1     The first vector reference.
    @param vec2     The second vector reference.
    |#
    (def swap
      (fn extern void ((vec1 (ref (Vector (uq T))))
                       (vec2 (ref (Vector (uq T)))))
        (let ((vec3 (Vector (uq T))))
          (core setf (# vec3) (@ vec1))
          (core setf vec1     (@ vec2))
          (core setf vec2     vec3)
          (return))))

    (def setf-move-init (fn extern bool ((dst (p (Vector (uq T))))
                                         (src (rv-ref (Vector (uq T)))))
      (init (@ dst))
      (let ((b1 \ (begin (@ src)))
            (e1 \ (end   (@ src))))
        (for true (!= b1 e1) (setv b1 (successor b1))
          (push-back (@ dst) (move (@ (source b1))))))
      (resize (@ src) (cast 0 size))
      true))

    (def setf-move-assign (fn extern bool ((dst (p (Vector (uq T))))
                                           (src (rv-ref (Vector (uq T)))))
      (clear (@ dst))
      (setf-move-init dst (move (@ src)))))

    (uq copy-functions)

    (implement Swappable (Vector (uq T)))
    (implement Container (Vector (uq T)))
    (implement Type (p (Vector (uq T))))
    (uq equality-comparable-forms)
    (uq less-than-comparable-forms)

    (def destroy
      (fn extern void ((vecp (ref (Vector (uq T)))))
        (clear (@ vecp))
        (return)))

    (implement Type (Iterator (Vector (uq T))))
    (implement Type (ReverseIterator (Vector (uq T))))
    (instantiate swap (Iterator (Vector (uq T))))
    (instantiate swap (ReverseIterator (Vector (uq T))))
    (implement OutputIterator (Iterator (Vector (uq T))))
    (implement OutputIterator (ReverseIterator (Vector (uq T))))
    (implement RandomAccessIterator (Iterator (Vector (uq T))))
    (implement RandomAccessIterator (ReverseIterator (Vector (uq T))))
    (implement BackInsertionSequence (Vector (uq T)))
    (implement RandomAccessContainer (Vector (uq T)))
    ))
   )))
))
