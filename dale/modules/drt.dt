#|
@module drt

'drt' is an abbreviation of 'Dale runtime'. The terminology is not
strictly accurate: it only contains those functions added by the
compiler, implicitly, to every program. In turn, the libraries
generated by way of compiling this module are used by the compiler
implicitly where necessary.
|#
(module drt)

(def DNode
  (struct extern ((is-list int)
                  (token-str (p char))
                  (list-node (p DNode))
                  (next-node (p DNode))
                  (begin-line int)
                  (begin-column int)
                  (end-line int)
                  (end-column int)
                  (macro-begin-line int)
                  (macro-begin-column int)
                  (macro-end-line int)
                  (macro-end-column int)
                  (filename (p char)))))

(def PoolNode
  (struct extern ((value (p void))
                  (next-node (p PoolNode))
                  (last-node (p PoolNode)))))

(def MContext
  (struct opaque ((arg-count int)
                  (pool-node (p PoolNode))
                  (generator (p void)))))

(def malloc (fn extern-c (p void) ((n size))))
(def free (fn extern-c void ((ptr (p void)))))
(def not (fn _extern-weak bool ((a bool)) (if a false true)))
(def memcpy (fn extern-c (p void) ((a (p void)) (b (p void)) (c size))))
(def pool-malloc
  (fn _extern-weak (p void) ((mc (p MContext)) (n size))
    (def pool-node (var auto \ (@:@ mc pool-node)))
    (def ln (var auto (p PoolNode) (@ (: (@ pool-node) last-node))))
    (if (null ln)
        (do (setf (: (@ pool-node) last-node) pool-node)
            (setv ln (@ (: (@ pool-node) last-node)))
            0)
        0)

    (def new-node    (var auto (p PoolNode)
                               (cast (malloc (sizeof PoolNode))
                                     (p PoolNode))))
    (def new-pointer (var auto (p void)     (malloc n)))

    (setf (: (@ new-node) value)     (cast 0 (p void)))
    (setf (: (@ new-node) next-node) (cast 0 (p PoolNode)))

    (setf (: (@ ln) value)     new-pointer)
    (setf (: (@ ln) next-node) new-node)
    (setf (: (@ pool-node) last-node) new-node)

    (return new-pointer)))

(def pool-free_
  (fn _extern-weak void ((pool-node (p PoolNode)))
    (if (not (null (@ (: (@ pool-node) value))))
        (do (free (@:@ pool-node value)) 0)
        0)
    (if (not (null (@:@ pool-node next-node)))
        (do (pool-free_ (@:@ pool-node next-node)) 0)
        0)
    (free (cast pool-node (p void)))
    (return)))

(def pool-free
  (fn _extern-weak void ((mc (p MContext)))
    (pool-free_ (@:@ mc pool-node))))

(def arg-count
  (fn _extern-weak int ((mc (p MContext)))
    (@:@ mc arg-count)))
