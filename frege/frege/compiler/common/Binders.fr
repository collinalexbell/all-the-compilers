--- This is an undocumented module.
module frege.compiler.common.Binders where 
        -- generated by Splitter
import  frege.Prelude  hiding(error, print, println, break, <+>)
import  frege.compiler.enums.Flags
import  frege.compiler.types.Global  as  G

--- a, b, ..., z, aa, ab, ac, ...
private binders ∷ [String] → [String]
private binders alphabet = alphabet 
        ++ [ s1++s2 | s1 <- binders alphabet, s2 <- alphabet ]


--- used to create greek names
!allGreekBinders = binders [ctos c | c <- "αβγδεζηθικλμνξοπρςστυφχψω" ]


--- used to create fraktur names
!allFrakturBinders = binders ["𝖆", "𝖇", "𝖈", "𝖉", "𝖊", "𝖋", "𝖌", "𝖍", "𝖎",
                             "𝖏", "𝖐", "𝖑", "𝖒", "𝖓", "𝖔", "𝖕", "𝖖", 
                             "𝖗", "𝖘", "𝖙", "𝖚", "𝖛", "𝖜", "𝖝", "𝖞", "𝖟" ]


--- used to create ASCII names
!allAsciiBinders = binders [ctos c | c <- ['a' .. 'z'] ]

{-- 
    Used to create Java type variables for single leter type names.

    This is an attempt to make the generated java code more pleasent to read, such that,
    if you said
    
    > foo :: a -> b -> (a,b)
    
    the Java code will be like
    
    > final static <𝓐, 𝓑> TTuple<𝓐,𝓑> foo (𝓐 arg1, 𝓑 arg2) { ... }
    
    In -ascii mode, we will not do this but generate a, b, c, ... and so forth.
    This is to ensure compatibility with other tools that need to read the code 
    (vim via tmux, scalac have been reported for difficulties with multi byte unicode characters) 
-}
allJtvBinders g = binders (jtvNames g)

jtvNames g
    | isOn flags USEUNICODE = mathJtvNames
    | otherwise             = asciiJtvNames
    where flags = (Global.options g).flags

!mathJtvNames =  ["𝓐", "𝓑", "𝓒", "𝓓", "𝓔", "𝓕", "𝓖", "𝓗", "𝓘", 
                  "𝓙", "𝓚", "𝓛", "𝓜", "𝓝", "𝓞", "𝓟", "𝓠", "𝓡", 
                  "𝓢", "𝓣", "𝓤", "𝓥", "𝓦", "𝓧", "𝓨", "𝓩"]
!asciiJtvNames = map ctos ['a' .. 'z']

jtvArray g
    | isOn flags USEUNICODE = mathJtvArray
    | otherwise             = asciiJtvArray
    where flags = (Global.options g).flags

!mathJtvArray = arrayFromList mathJtvNames
!asciiJtvArray = arrayFromList asciiJtvNames

--- select alphabet for binders depending on current flags
allBinders g 
    | isOn flags USEFRAKTUR = allFrakturBinders 
    | isOn flags USEGREEK   = allGreekBinders
    | otherwise = allAsciiBinders
    where flags = (Global.options g).flags

--- a function that tells if a 'String' is member of the current binders
avoidBinders g 
    | isOn flags USEFRAKTUR = ( ~ '^[𝖆𝖇𝖈𝖉𝖊𝖋𝖌𝖍𝖎𝖏𝖐𝖑𝖒𝖓𝖔𝖕𝖖𝖗𝖘𝖙𝖚𝖛𝖜𝖝𝖞𝖟]+$')
    | isOn flags USEGREEK   = ( ~ '^[αβγδεζηθικλμνξοπρςστυφχψω]+$')
    | otherwise             = ( ~ '^[a-z]+$')
    where flags = (Global.options g).flags
