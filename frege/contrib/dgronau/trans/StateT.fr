package frege.control.monad.trans.StateT where

--import Control.Monad( forever )

-- | The strict state-transformer monad.
-- A computation of type @'ST' s a@ transforms an internal state indexed
-- by @s@, and returns a value of type @a@.
-- The @s@ parameter is either
--
-- * an uninstantiated type variable (inside invocations of 'runST'), or
--
-- * 'RealWorld' (inside invocations of 'Control.Monad.ST.stToIO').
--
-- It serves to keep the internal states of different invocations
-- of 'runST' separate from each other and from invocations of
-- 'Control.Monad.ST.stToIO'.
--
-- The '>>=' and '>>' operations are strict in the state (though not in
-- values stored in the state).  For example,
--
-- @'runST' (writeSTRef _|_ v >>= f) = _|_@
data ST s a = ST (STRep s a)
type STRep s a = State s -> ( State s, a )

data State a = State a

instance Functor (ST s) where
    fmap f (ST m) = ST $ (\ s ->
      case (m s) of { (new_s, r) ->
      (new_s, f r) })

instance Monad (ST s) where
    {-# INLINE return #-}
    {-# INLINE (>>)   #-}
    {-# INLINE (>>=)  #-}
    return x = ST (\ s -> (s, x))
    m >> k   = m >>= (\ _ -> k)

    (ST m) >>= k
      = ST (\ s ->
        case (m s) of { (new_s, r) ->
        case (k r) of { ST k2 ->
        (k2 new_s) }})

data STret s a = STret (State s) a

{-# SPECIALISE forever :: ST s a -> ST s b #-}
-- See Note [Make forever INLINABLE] in Control.Monad

-- liftST is useful when we want a lifted result from an ST computation.  See
-- fixST below.
liftST :: ST s a -> State s -> STret s a
liftST (ST m) = \s -> case m s of ( s', r ) -> STret s' r

{-# NOINLINE unsafeInterleaveST #-}
unsafeInterleaveST :: ST s a -> ST s a
unsafeInterleaveST (ST m) = ST ( \ s ->
    let
        r = case m s of ( _, res ) -> res
    in
    ( s, r )
  )

-- | Allow the result of a state transformer computation to be used (lazily)
-- inside the computation.
-- Note that if @f@ is strict, @'fixST' f = _|_@.
--fixST :: (a -> ST s a) -> ST s a
--fixST k = ST (\ s -> let ans       = liftST (k r) s
--                         STret _ r = ans
 --                    in case ans of STret s' x -> ( s', x )
--             )

instance  Show (ST s a)  where
    show _  = "<<ST action>>"

{-# INLINE runST #-}
-- The INLINE prevents runSTRep getting inlined in *this* module
-- so that it is still visible when runST is inlined in an importing
-- module.  Regrettably delicate.  runST is behaving like a wrapper.

-- | Return the value computed by a state transformer computation.
-- The @forall@ ensures that the internal state used by the 'ST'
-- computation is inaccessible to the rest of the program.
--runST :: (forall s. ST s a) -> a
--runST st = runSTRep (case st of { ST st_rep -> st_rep })

-- I'm only letting runSTRep be inlined right at the end, in particular *after* full laziness
-- That's what the "INLINE [0]" says.
--              SLPJ Apr 99
-- {-# INLINE [0] runSTRep #-}

-- SDM: further to the above, inline phase 0 is run *before*
-- full-laziness at the moment, which means that the above comment is
-- invalid.  Inlining runSTRep doesn't make a huge amount of
-- difference, anyway.  Hence:

{-# NOINLINE runSTRep #-}
--runSTRep :: (forall s. STRep s a) -> a
--runSTRep st_rep = case st_rep realWorld of
--                        (_, r) -> r
