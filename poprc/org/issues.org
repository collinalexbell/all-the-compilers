#+TITLE: PoprC Issues

* vlgen
** TODO register inputs and outputs as needed to handle synchronization
- modify gen_sync_disjoint_* functions
** DONE non-tail recursion
*** DONE initial single call site support
- split ... in `self(x); ...; return y;`
  - where there are no other self calls in ...
*** DONE stack per value to allow singe cycle access
*** DONE store inputs to block instead of top level
** DONE memory tokens (Array)
*** DONE convert Array symbol to memory interface
*** DONE add primitives
- ready/valid for sequencing
** IO
** data types
*** string
** more testbenches
*** reverse
*** sort
* STARTED Compile to C
Compile to direct C when possible
- strict, function arguments, no backtracking
** simple numeric ops (e.g. :c f1 + *)
* improvements
** DONE add afl fuzzing
** add more tests to tests.ppr
** CANCELED clear_flags in func_select?
** DONE remove unnecessary clear_ptr's
*** mark_ptr
**** closure_set_ready
**** split_args
* major
** TODO type conflicts in condition chains (or, and)
ir/trace.c:918: trace_update_2: Assertion `ONEOF(pt, T_ANY, T_BOTTOM) || ONEOF(t, T_BOTTOM, pt)' failed: @type
*** workaround: force type of output to be the same (e.g. symbol_t)
** TODO pushl/pushr inside loops
** TODO nested lists
** STARTED implement tail recursion modulo X
*** TODO handle recursion modulo X in backends
*** compose, ap
*** addition, multiplication
** TODO check that alt is only used in exprs for chains, look at deps
** DONE fix list.filter
** DONE placeholder should mirror compNM
- [left] N... [right]
- apNM: [] N... [right]
** TODO push cases in from `otherwise` to avoid seq
- if handling all cases without knowledge is allowed, it's easy to build `seq`
- switching always forces an argument, which is okay as long as it requires knowing the structure
- ideally, `dup ifte` should be equivalent to `nip`, but this probably isn't feasible in general
- maybe this can be eliminated with context, or not allowing nonlinear values for otherwise
** TODO define symbols in modules and limit exporting
** DONE remove underscore hack
** DONE avoid expanding placeholders
** DONE overhaul byte_compile to use variable ids
** DONE don't trace pushl/pushr/popr again, let assertion mapping enforce assertions
** CANCELED every cell has a pointer to previous item in stack/list at arg[0] (left arg)
- canceled because this would force linear evaluation
fixes map_assert
formalizes placeholders
every function must have at least one input and one output, but last input is not evaluated, breaking the chain
assert also works this way
** DONE map assertions over lists to avoid unnecessary pushl-assert-popr
** DONE add reference checking assert to help find leaks (mini-valgrind)
** DONE add support to return quoted functions from compiled functions
*** DONE count inputs
- all vars + open args on left
*** DONE store func_exec with entry + args + outputs
*** DONE compile auxilary functions
*** DONE handle pushl
- :d f1 1 swap pushl popr swap drop
- pushl before argument
- delay until lazy argument is evaluated?
  - just force both args when list is a var
** CANCELED compile all quoted functions
- part of "add support to return quoted functions from compiled functions"
** C generation
*** DONE Return types
*** DONE function signature
*** DONE simple expressions
*** DONE select -> if/then
*** DONE pushl/popr
- experiments/quote
** modules
*** TODO module linking
*** DONE look up words from modules
*** DONE build/compile on demand
*** DONE add module union operation
** CANCELED look into adding conflict-driven clause learning
** DONE add comment and symbol support to parser
** DONE add primitive apNM operator
** CANCELED need a separate arity pass for placeholders?
* minor
** TODO unreduced alts: [1 2 3] fuse_map_with_filter
** TODO replace mark_barriers with something like mutate to avoid leaking variables from inner functions
** TODO duplicated list.length_r0 in bytecode output
** TODO stable log ids
- file + line number enum for msg id e.g. enum { trace_997, ... }
- log id = msg id + hash of args
- only need to hash args at runtime if watching msg
- log entries can now use msg ids instead of char *, allowing space for meta data
** TODO add trace ring buffer for ref/drop to quickly find source of memory problems
** TODO Document different uses of cell_t fields
** DONE look at logic to trace ap vs. compose (tests.ap_loop4)
- compMN = apM0 . ap0N
- apMN = [] ... compMN
- broken:
  - [1+] 2 3 [+] comp20
  - [] 1 2 [+] comp21
  - [] 1 [id] comp11
** DONE hash function definitions
** TODO [id] popr drop ==> [], should fail (should it?)
** DONE propagate drops in to loop returns to avoid building values to drop (tests.f7c)
** DONE handle nil the same as other non-list values in trace
** TODO need to review handling of pos
** TODO log tag support in lldbinint.py
** DONE optimize breakpoint() with log_add_last
** TODO levels can be added to logging by embedding in fmt string
*** compile time flag for max log level
*** filter log output by argument to :log
** TODO improve pattern matching in byte_compile
** DONE write integer exponentiation in Popr
** DONE f: [popr drop] [popr 3 <] iterate
** DONE compile partially applied recursive functions
e.g. f: [7+] [12<] control.iterate
** DONE when leftmost arg of a placeholder is a row, compose
r x y f p -> r x y f ap20 .
T_FUNCTION, T_LIST | T_ROW related
T_ROW needs to be stored in list containing row value, because the value may not be reduced yet
Leftmost the list can be a function
** DONE leftmost ptr in a list can be a row
*** DONE pass tests
*** CANCELED make quote return a function with a row arg
*** DONE fix pushl into quote function (in compose_arg)
** DONE allocate all vars from trace (preallocate)
** DONE memory leak in tests.pushl2
** DONE stable references in modules
** TODO handle module scope chain when compiling a word
look for word in parent module, parent imports, context module, context imports, ...
** DONE get cgen working with simple popr & pushl functions
** DONE fix func_exec to work when branching and recursive
** DONE add compilation tests
** DONE handle alts correctly in func_exec
** DONE f1: [1+]
** DONE fix get2 in tests.peg
** CANCELED pass T_BOTTOM instead of T_ANY down reduce
** DONE remove cut
** CANCELED update refcnt for cells in genc
** TODO use refcounts properly for maps and lists in modules
** TODO add static asserts as tests
- check symbol table
- check builtins table order
** DONE adapt func_exec to new bytecode format
** DONE handle ENTRY_NOINLINE in func_exec
** DONE annotate trace with types in byte_compile.c
** DONE replace all tables with maps
** DONE add string map
* bugs
** TODO popr -ev [1 +] 2 $ dup even!
- need to find correct .src
- scan referenced entries
** TODO popr -def f: 1 A + -bc 3 f +
** TODO 2 3 | 5 7 | * dup 15 == !
** TODO bytecode is incorrect for tests.collatz when using custom default bounds
** TODO vlgen: link assert/unless into sync
** TODO io.getline_loop type mismatches in assert chain breaking trace_get_opaque_symbol()
** TODO `_[\n__ blah\n` doesn't parse correctly
** DONE f: [id]
** DONE f: [id] swap .
** DONE ladd: [1+ ladd] [dup] dip12 pushl
** DONE isolate alt_sets and reset alt_cnt during compilation
** DONE f: [] pushl [dup [[1+] . f] [head 10 <] para] ifdo head
** DONE f: [] pushl [[1+] .] [head 10 <] iterate head
** DONE f: | dup f, f: 1+ 0 | f
** DONE f: [] ap30 [[power_step] .] [head 0 !=] iterate popr drop popr drop head
** DONE f: 1 2 | swap ap11 swap drop
** DONE [1 3] 2 pushr popr swap popr swap popr swap popr
** DONE imports don't always work
** DONE stack.nip leaks
** TODO staging.carry doesn't seem to work right
** DONE staging.ifdo
** DONE 1 [dup 2+] [3+ dup] | ap12 stack.swap2 drop
** DONE f: 3+ [[] pushl] pushl [] [[2]] | . popr swap drop
- leak
** DONE ? [id] . popr
** DONE no return in 32 bit control.ap21
** DONE vars don't update type for T_LIST
** DONE f: pushl
- introduces extra T_FUNCTION into quote
** DONE ? popr swap popr swap drop
placeholders *do* need to be shared, unless an input is modified
new_deps() should not create unreferenced deps
** DONE [1 2 3 4 5] ? [] [] | . .
** DONE [] [] . IO | dup print
** DONE [] [] | [id] .
** DONE ? [swap] ? [swap] . .
** DONE [1 2] [] | ? [id] [3] | . .
** DONE [ id 2 ] ? [ id ] . .
** DONE ? [ id ] [ id ] | .
** DONE [ id 2 2 ] ? [ id ] . .
** DONE [] ? dup [id] swap | . [] .
** DONE VV L JsC ! Js ! [ - ] ? | [ ] ? | [ * ! . . . * . * . Q [ G * ] dup - ] ? | [ ] ? | [ * ! . . . * . * ] . . popr
eval: rt.c:723: cell_t *add_to_list(cell_t *, cell_t *, cell_t **): Assertion `check_tmp_loop(*l)' failed.
** DONE [ 3 2 - ] > , [ 2 C - ] ? | .
** DONE ? dup [+] . .
** DONE ? dup [+] . swap .
** TODO [ swap ] dup pushl popr drop dup pushl popr
Creates a cycle that can't be freed
** DONE [ 3 ] ? [ ! ] . [ ] | . __ hang
** DONE f: . popr swap drop
[1] [2] f __ leak!
** DONE f: pushr popr swap drop __ unreferenced pushr
** DONE fix tests.sum
** DONE f1: [1] swap ! popr swap drop
** DONE f1: 1 swap pushl popr ! popr swap drop
[3<] f1 __ crashes!
** DONE ? [dup 1- swap 3 <] [dup 1+ swap 3 >] | pushl popr ! popr swap drop
** DONE 1 2 3 | | dup 3 < !
** DONE f1: [ 1 ] [ 2 ] | pushl popr __ 3 f1
** DONE f1: [] pushl f1 __ why is arity 1 -> 2 instead of 1 -> 1?
** DONE f1: [] pushl
** DONE f1: dup f1 [] pushl
1 f1 __ crashes!
** DONE f2: popr swap pushl popr (regression)
** DONE :d f1 |
** DONE fix compiling pushr & pushl
- f1 pushr
- f2 popr swap pushl popr
- f3 swap pushl
** CANCELED select seems broken
:c f2 | popr ! cut popr swap drop
:c rot [] pushl swap pushr pushl popr swap popr swap popr swap drop
:c f5 [] pushl rot rot | swap pushl popr swap popr swap drop dup rot > ! cut
** DONE :c f2 pushl pushl popr 1 + swap pushl popr swap popr swap drop +
x y [z+] should be x + y + z + 1, gives 2y + 2z + 1
** DONE :bc f1: [] [] ifte pushl
** DONE :bc loop: dup 5 > [5- loop] [] ifte ap11 swap drop
- self/exec arity mismatch
** DONE smaller CELLS_SIZE breaks at module_lookup test
** DONE FIX: 0 [True =:=] [0 ==] | pushl popr swap drop
- returns {} instead of True
- works when alts are swapped
- args are failed on type mismatch, so it sticks for later alts
  - use something like split_args
** DONE :( -> segmentation fault
also just (
** DONE cut memory leak
1 2 | cut
** DONE :c c1 [ 1 ] swap . popr swap drop
** DONE :c f1 swap !
** DONE 100000 mod5 -> stack overflow (func_exec, func_select)
- treat select with variable arg as alt followed by cut
** DONE preserve select when using exec e.g. ifte
** DONE :c f1 pushl popr swap pushl popr
- [dup] popr swap pushl popr __ crash!
- [dup] popr swap pushl __ self referential dup
** DONE func_placeholder breaks when swapping popr eval order
:c p2 popr swap popr swap drop swap
* byte_compile
** DONE exec
** DONE replace func_self when loading code in func_exec
** DONE compose?
- in compose_nd
- fix compose_placeholders/_nd
** CANCELED build incomplete closures
- part of "add support to return quoted functions from compiled functions"
