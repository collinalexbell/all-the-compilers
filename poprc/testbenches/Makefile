# functions generated by PoprC
FUNCTIONS = $(shell cat functions)

COMMON = $(wildcard ../vlgen/*.v util/*.v)
#IVERILOG_FLAGS = -pfileline=1

BUILD = build
INCLUDE = -I../vlgen -I$(BUILD)/gen -Iutil
POPRC_RC := poprc_rc

# set FUNCTION and BITS for each target in FUNCTION_SRCS
$(foreach spec, $(FUNCTIONS), \
  $(eval _function=$(firstword $(subst :, ,$(spec)))) \
  $(eval _bits=$(word 2,$(subst :, ,$(spec)))) \
  $(eval _target=$(shell ../eval -ident $(_function)).v) \
  $(eval $(BUILD)/gen/$(_target):FUNCTION=$(_function)) \
  $(eval $(BUILD)/gen/$(_target):BITS=$(_bits)))

.PHONY: all
all: test $(patsubst %, $(BUILD)/preprocessed/%, $(wildcard *_swbut.v))

.PHONY: sim
sim: $(patsubst %_tb.v, $(BUILD)/sim/%_tb.fst, $(wildcard *_tb.v))
sim: $(patsubst %_tb.v, $(BUILD)/sim/%_tb.log, $(wildcard *_tb.v))

.PHONY: test
test: sim
	diff -U 3 -r -x '*.fst' -x '*~' verified $(BUILD)/sim

.PHONY: verify
verify: sim
	@mkdir -p verified
	cp $(BUILD)/sim/*.log verified/

print-%:
	@echo $* = $($*)

# keep intermediate files
.SECONDARY:

$(BUILD)/sim/%_tb.fst $(BUILD)/sim/%_tb.log: $(BUILD)/vvp/%_tb.vvp
	@mkdir -p $(BUILD)/sim
	cd $(BUILD)/sim && vvp -l$*_tb.log $(abspath $<) -fst

# add generated files as prerequisites for *_tb.v and *_swbut.v
$(foreach suf, tb swbut swbut_tb top, \
  $(foreach target, $(wildcard *_$(suf).v), \
    $(eval $(BUILD)/preprocessed/$(target): $(patsubst %_$(suf).v, $(BUILD)/gen/%.v, $(target)))))
$(BUILD)/preprocessed/%.v: %.v $(COMMON)
	@mkdir -p $(dir $@)
	iverilog -o - -E $(INCLUDE) -Ddumpfile="\"$*.fst\"" $< | sed 's/[[:space:]]*$$//' | cat -s > $@

$(BUILD)/vvp/%_tb.vvp: $(BUILD)/preprocessed/%_tb.v
	@mkdir -p $(dir $@)
	iverilog -o $@ $(INCLUDE) $(IVERILOG_FLAGS) $<

$(BUILD)/gen/%.v: ../lib.ppr ../tests.ppr ../eval
	@mkdir -p $(dir $@)
	@if [ "$(FUNCTION)" ]; then \
	  echo "generating $(FUNCTION)"; \
          (cd ..; \
	   ./eval -rc $(POPRC_RC) \
	     -lo lib.ppr tests.ppr \
	     -bound $(BITS) \
	     -cv $(FUNCTION) \
	  ) > $@; \
        fi

../eval:
	make -C ..

.PHONY: clean
clean:
	rm -rf $(BUILD)
