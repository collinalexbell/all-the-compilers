__ simple operator => [ 3 ]
1 2 +
  3
__ alts => [ { 10 | 15 | 14 | 21 } ]
2 3 | 5 7 | *
  10
  14
  15
  21
__ pushl/popr  => [ [] 3 ]
1 [2+] pushl popr
  [] 3
__ sharing test => [ [ 4 ] [ 2 ] ]
[1+] dup [3] swap . swap [1] swap .
  [4] [2]
__ sharing test
[[3 +]] dup popr 1 swap pushl
  [[3 +]] [] [4]
__ dup alt
1 2 | dup
  1 1
  2 2
__ compose alt
[3] [2*] [2-] | .
  [6]
  [3 2 -]
__ compose dup
[1] [dup] .
  [1 1]
__ pushl sharing
[3+] dup 1 swap pushl
  [3 +] [4]
[dup] dup pushl
  [[] []]
1 [dup] dup . pushl popr
  [1 1] 1
__ [dup pushl popr] dup pushl popr
__ [dup pushl popr swap drop] dup pushl popr swap drop
__ infinite [1]'s
[dup pushl popr swap 1] dup pushl popr drop popr popr popr
  [1] [1] [1] [1 [1 [1 [1 [...]]]]]
__ [[] 1] [! drop dup 0 swap pushl pushl] [0 == ! drop 0 force [] pushl pushl] | . popr swap drop popr
[1 2 | ] popr
  [] 1
  [] 2
__ [[[! force drop dup [0] pushl swap pushl popr swap drop] [0 == ! force drop [0] force pushl] | . popr swap drop] 1] [! force drop dup [0] pushl swap pushl popr swap drop] [0 == ! force drop [0] force pushl] | . popr swap drop
[[1 2 |][3 4|] |] popr popr
  [] [] 1
  [] [] 2
  [] [] 3
  [] [] 4
[[[5]]] [[[4]] [[3] [2 1 |]|]|]| popr swap drop popr swap drop popr swap drop
  5
  4
  3
  2
  1
__ [[[! force 1- ' [dup] dip12 pushl swap pushl popr swap drop] [0 == ! force drop [0] force pushl] | . popr swap drop] 1] [! force 1- ' [dup] dip12 pushl swap pushl popr swap drop] [0 == ! force drop [0] force pushl] | . popr swap drop
__ [[[! 1- [] force pushl [dup] dip12 pushl swap pushl popr swap drop] [dup 0 == ! force drop [] force pushl force pushl] | . popr swap drop cut] 5] [! 1- [] force pushl [dup] dip12 pushl swap pushl popr swap drop] [dup 0 == ! force drop [] force pushl force pushl] | . popr swap drop cut
1 0 | dup
  1 1
  0 0
1 [1- dup 0 > !] [1+ dup 0 > !] | pushl popr
  [] 2
[0 |] dup 4 swap pushl popr swap drop swap 3 swap pushl popr swap drop +
  7
  4
  3
  0
[1] [3] | popr pushr popr
  [] 1
  [] 3
[0 1 |] dup popr swap drop swap popr swap drop
  0 0
  1 1
__ [1 [swap 1+ swap force dup pushl pushl popr swap drop]] [dup] . popr . popr
__ [5 [swap [! 1-] [0 == ! 0 force swap drop] | pushl head swap force dup pushl pushl head]] [dup] . popr . popr
__ [1 [swap ! 1- swap force dup pushl pushl head] [swap 0 == ! 1- force swap] || ] [dup] . popr . popr
__ [100 [swap ! cut 1- swap force dup pushl pushl popr swap popr swap drop swap] [swap 0 == ! cut 1- force swap] || ] [dup] . popr . [swap] . head cut
__ =loop 6 [dup 0 > swap 5- loop swap !] [dup 0 <= !] | pushl
False True | dup !
  True
1 [dup swap drop] pushl popr
  [] 1
__ type mismatch test
0 [True =:=] [0 ==] | pushl popr swap drop
  True
__ test assert with > 2 alts
1 2 3 | | dup 3 < !
  1
  2
[1] 2 pushr [3] 4 pushr .
  [1 2 3 4]
__ test integer -> float promotion
1 2.3 +f
  3.3
__ numeric parsing
-0xf0e1
  -61665
0xf0e1
  61665
1e3
  1000
1.2e3
  1200
1.2
  1.2
__ otherwise
1 0 / 40 2 + otherwise
  42
1 0 / 2 3 | otherwise
  2
  3
1 2 | 3 otherwise
1 2 otherwise 3 otherwise
  3
__ strings
"a" "b" ++
  "ab"
"a" "a" =s
  True
"a" "b" =s
  False
42 ->str
  "42"
"42" <-str
  42
"a, b" ", " strsplit
  "a" "b"
"========>" "---------------good" ++
  "========>---------------good"
__ IO
__ IO 5 read "Hello " swap ++ "\n" ++ write
__ World
__ [] [] | popr
[A] False! [B] . popr swap drop
  B
[1] id [2] id [3] . .
  [1 2 3]
__ [1] id [2] . dup .
__ [1] [. 2] id [3 B] . dup . .
__ arrays
Array 3 42 write_array Array 3 10 write_array swap 3 read_array swap drop swap 3 read_array swap drop
  42 10
Array 3 read_array 0 swap unless
  Array# 0
__ fix me
2 3 | 5 7 | * dup 15 == !
  10
__ comma
[[1,2],3,[4,5]]
  [[1] [2]] [3] [[4] [5]]
__ number parsing
-0.005 -5e-3 5e-3 5e3 -0xa 0xA 0644 42
  -0.005 -0.005 0.005 5000 -10 10 420 42
