import test

var t = test.t

t.scope(__file__)

t.interpret("Check generics with and_then",
    """
    # This test checks that lambdas can pull inference information when they are
    # to be returned. and_then is also called too, just to make sure it works.

    define and_then[A, B, C](f: Function(A => B), g: Function(B => C)): Function(A => C)
    {
        return (|a| g(f(a)) )
    }

    define piped_and_then[A, B, C](f: Function(A => B), g: Function(B => C)): Function(A => C)
    {
        return (|a| a |> f |> g )
    }

    define f(a: Integer): Integer { return a * a }

    and_then(f, f)(10)
    piped_and_then(f, and_then(f, f))(20)
    """)

t.interpret("Verify no double solve for input generics.",
    """
    define f[A, B, C, D, E, F](values: F...) {}
    define k[A](v1: A, v2: A) { f(v1, v2) }
    k(1, 2)

    define check_generics_inherited {
        define a[A] {
            define b(v1: A) {

            }
        }
    }

    define check_generic_sub_assign[A](a: List[A]) {
        a[0] = a[1]
    }

    define check_empty_list_assign[A](a: List[A]) {
        a = []
    }
    """)

t.interpret("Verify unquantified generic solving.",
    """
    define id[A](value: A): A { return value }

    define quant {
        [1, 2, 3].map(id)
    }

    # This time, the item of interest is Option.is_none
    # The List, post map, is List[Option[Integer]]
    # Option.is_none is Option[A] => Boolean
    # Make sure this one works too.
    var v = ["1"].map(String.parse_i).reject(Option.is_none)

    define f[A](a: A) {}

    # Again, but with a non-generic function as the target.

    B"".each_byte(f)
    """)

t.interpret("Verify assign is covariant for plain class types.",
    """
    class One {}
    class Two < One {}

    var v = One()
    v = Two()

    var v2 = [v]
    v2[0] = Two()
    """)

t.interpret("Verify passing a better ",
    """
    class One[A](a: A) {}
    class Two[A](a: A) < One(a) {}

    define g[A](a: One[A])
    {
    }

    define f[A](a: One[A], b: Two[A])
    {
        g(b)
    }
    """)

t.interpret("Verify function returns are covariant.",
    """
    class One {}
    class Two < One {}

    define f(a: One) {}
    define g(a: Two) {}

    var v = g
    v = f
    """)

t.interpret("Check that generics are covariant with function returns.",
    """
    class One {}
    class Two < One {}
    class Three < Two {}

    define f[A](input: A, g: Function(A => A)) {}

    # This works because when trying to solve as 'Function(A => A)', the first A
    # is looked at contravariantly, while the second is covariant.
    # Doing the reverse (taking either Three or outputting One) would be incorrect.

    define g(a: One) : Three { return Three() }

    f(Two(), g)
    """)

t.interpret_for_error("Generics can't solve to scoop.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Function (String, List[?])\n\
    Received Type: Function (String, $1... => String)\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    define f[A](a: Function(String, List[A]), b: A, c: A): List[A] {
        return [b, c]
    }

    f(String.format, 1, "2") |> print
    """)
