import test

var t = test.t

t.scope(__file__)

t.assert("ByteString.encode with invalid mode fails.",
         (|| B"0".encode("invalidmode").is_none() ))

t.assert("ByteString.encode with embedded zero fails.",
         (|| B"\000".encode("error").is_none() ))

t.assert("ByteString.encode(error) allows valid utf-8.",
         (|| B"\195\169".encode("error").unwrap() == "Ã©" ))

t.assert("ByteString.encode(error) allows an empty string.",
         (|| B"".encode("error").unwrap() == "" ))

t.assert("ByteString.encode(error) allows plain ascii.",
         (|| B"asdf".encode("error").unwrap() == "asdf" ))

t.assert("ByteString.encode(error) forbids invalid utf-8 (255 * 3).",
         (|| B"\255\255\255".encode("error").is_none() ))


t.assert("ByteString.size basic success case.",
         (|| B"abc".size() == 3 ))

t.assert("ByteString.size for converted String.",
         (|| "abc".to_bytestring().size() == 3 ))


t.assert("ByteString.slice defaults copy the string.",
         (|| B"abc".slice() == B"abc" ))

t.assert("ByteString.slice basic 0...-1 works.",
         (|| B"abc".slice(0, -1) == B"ab" ))

t.assert("ByteString.slice basic 1...2 works (b).",
         (|| B"abc".slice(1, 2) == B"b" ))

t.assert("ByteString.slice gives empty string for reversed indexes.",
         (|| B"abc".slice(2, 1) == B"" ))

t.assert("ByteString.slice gives empty string for too big indexes.",
         (|| B"abc".slice(1, 5) == B"" ))


t.assert("ByteString.each_byte loop check.",
         (||
    var success = true
    var i = 0
    var expect = ['a', 'b', 'c']

    B"abc".each_byte(|b|
        if success: {
            success = (expect[i] == b)
            i += 1
        }
    )

    success))
