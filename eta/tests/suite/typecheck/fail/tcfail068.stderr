
tests/suite/typecheck/fail/tcfail068.hs:14:9: error:
    Couldn't match type ‘s1’ with ‘s’
      ‘s1’ is a rigid type variable bound by
           a type expected by the context: GHC.ST.ST s1 (IndTree s a)
           at tests/suite/typecheck/fail/tcfail068.hs:13:9
      ‘s’ is a rigid type variable bound by
          the type signature for
            itgen :: Constructed a => (Int, Int) -> a -> IndTree s a
          at tests/suite/typecheck/fail/tcfail068.hs:11:10
    Expected type: GHC.ST.ST s1 (IndTree s a)
      Actual type: GHC.ST.ST s1 (STArray s1 (Int, Int) a)
    Relevant bindings include
      itgen :: (Int, Int) -> a -> IndTree s a
        (bound at tests/suite/typecheck/fail/tcfail068.hs:12:1)
    In the first argument of ‘runST’, namely
      ‘(newSTArray ((1, 1), n) x)’
    In the expression: runST (newSTArray ((1, 1), n) x)

tests/suite/typecheck/fail/tcfail068.hs:19:21: error:
    Couldn't match type ‘s’ with ‘s1’
      ‘s’ is a rigid type variable bound by
          the type signature for
            itiap :: Constructed a =>
                     (Int, Int) -> (a -> a) -> IndTree s a -> IndTree s a
          at tests/suite/typecheck/fail/tcfail068.hs:16:10
      ‘s1’ is a rigid type variable bound by
           a type expected by the context: GHC.ST.ST s1 (IndTree s a)
           at tests/suite/typecheck/fail/tcfail068.hs:18:9
    Expected type: STArray s1 (Int, Int) a
      Actual type: IndTree s a
    Relevant bindings include
      arr :: IndTree s a
        (bound at tests/suite/typecheck/fail/tcfail068.hs:17:11)
      itiap :: (Int, Int) -> (a -> a) -> IndTree s a -> IndTree s a
        (bound at tests/suite/typecheck/fail/tcfail068.hs:17:1)
    In the first argument of ‘readSTArray’, namely ‘arr’
    In the first argument of ‘(>>=)’, namely ‘readSTArray arr i’

tests/suite/typecheck/fail/tcfail068.hs:24:36: error:
    Couldn't match type ‘s’ with ‘s1’
      ‘s’ is a rigid type variable bound by
          the type signature for
            itrap :: Constructed a =>
                     ((Int, Int), (Int, Int)) -> (a -> a) -> IndTree s a -> IndTree s a
          at tests/suite/typecheck/fail/tcfail068.hs:23:10
      ‘s1’ is a rigid type variable bound by
           a type expected by the context: GHC.ST.ST s1 (IndTree s a)
           at tests/suite/typecheck/fail/tcfail068.hs:24:29
    Expected type: GHC.ST.ST s1 (IndTree s a)
      Actual type: GHC.ST.ST s (IndTree s a)
    Relevant bindings include
      itrap' :: Int -> Int -> GHC.ST.ST s (IndTree s a)
        (bound at tests/suite/typecheck/fail/tcfail068.hs:26:9)
      itrapsnd :: Int -> Int -> GHC.ST.ST s (IndTree s a)
        (bound at tests/suite/typecheck/fail/tcfail068.hs:29:9)
      arr :: IndTree s a
        (bound at tests/suite/typecheck/fail/tcfail068.hs:24:23)
      itrap :: ((Int, Int), (Int, Int))
               -> (a -> a) -> IndTree s a -> IndTree s a
        (bound at tests/suite/typecheck/fail/tcfail068.hs:24:1)
    In the first argument of ‘runST’, namely ‘(itrap' i k)’
    In the expression: runST (itrap' i k)

tests/suite/typecheck/fail/tcfail068.hs:36:46: error:
    Couldn't match type ‘s’ with ‘s1’
      ‘s’ is a rigid type variable bound by
          the type signature for
            itrapstate :: Constructed b =>
                          ((Int, Int), (Int, Int))
                          -> (a -> b -> (a, b))
                          -> ((Int, Int) -> c -> a)
                          -> (a -> c)
                          -> c
                          -> IndTree s b
                          -> (c, IndTree s b)
          at tests/suite/typecheck/fail/tcfail068.hs:34:15
      ‘s1’ is a rigid type variable bound by
           a type expected by the context: GHC.ST.ST s1 (c, IndTree s b)
           at tests/suite/typecheck/fail/tcfail068.hs:36:40
    Expected type: GHC.ST.ST s1 (c, IndTree s b)
      Actual type: GHC.ST.ST s (c, IndTree s b)
    Relevant bindings include
      itrapstate' :: Int -> Int -> c -> GHC.ST.ST s (c, IndTree s b)
        (bound at tests/suite/typecheck/fail/tcfail068.hs:38:9)
      itrapstatesnd :: Int -> Int -> c -> GHC.ST.ST s (c, IndTree s b)
        (bound at tests/suite/typecheck/fail/tcfail068.hs:41:9)
      arr :: IndTree s b
        (bound at tests/suite/typecheck/fail/tcfail068.hs:36:34)
      itrapstate :: ((Int, Int), (Int, Int))
                    -> (a -> b -> (a, b))
                    -> ((Int, Int) -> c -> a)
                    -> (a -> c)
                    -> c
                    -> IndTree s b
                    -> (c, IndTree s b)
        (bound at tests/suite/typecheck/fail/tcfail068.hs:36:1)
    In the first argument of ‘runST’, namely ‘(itrapstate' i k s)’
    In the expression: runST (itrapstate' i k s)
