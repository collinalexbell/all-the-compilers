
tests/suite/applicativeDo/fail/T13242a.hs:10:5: error:
    Couldn't match expected type ‘a0’ with actual type ‘a’
      because type variable ‘a’ would escape its scope
    This (rigid, skolem) type variable is bound by
      a pattern with constructor
        A :: forall a. Eq a => a -> T,
      in a pattern binding in
           'do' block
      at tests/suite/applicativeDo/fail/T13242a.hs:10:3-5
    Relevant bindings include
      x :: a (bound at tests/suite/applicativeDo/fail/T13242a.hs:10:5)
    In the expression:
      do { A x <- undefined
           _ <- return 'a'
           _ <- return 'b';
           return (x == x) }
    In an equation for ‘test’:
        test
          = do { A x <- undefined
                 _ <- return 'a'
                 _ <- return 'b';
                 return (x == x) }

tests/suite/applicativeDo/fail/T13242a.hs:13:13: error:
    No instance for (Eq a0) arising from a use of ‘==’
    The type variable ‘a0’ is ambiguous
    Relevant bindings include
      x :: a0 (bound at tests/suite/applicativeDo/fail/T13242a.hs:10:5)
    Note: there are several potential instances:
      instance Eq a => Eq (GHC.Base.NonEmpty a) -- Defined in ‘GHC.Base’
      instance Eq GHC.Types.Object -- Defined in ‘GHC.Classes’
      instance Eq Ordering -- Defined in ‘GHC.Classes’
      ...plus 24 others
    In a stmt of a 'do' block: return (x == x)
    In the expression:
      do { A x <- undefined
           _ <- return 'a'
           _ <- return 'b';
           return (x == x) }
    In an equation for ‘test’:
        test
          = do { A x <- undefined
                 _ <- return 'a'
                 _ <- return 'b';
                 return (x == x) }
