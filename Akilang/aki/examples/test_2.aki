# Layer 0: Platform-specific functions
# Use the platform version of a function when we can.

extern GetStdHandle(nStdHandle:i32):ptr u_size

extern WriteConsoleA(
    hConsoleOutput:ptr u_size,
    lpBuffer: ptr u_mem,
    nNumberOfCharsToWrite: i32,
    lpNumberOfCharsWritten: ptr i32,
    lpReserved: u64 = 0:u64
):i32

extern GetProcessHeap():ptr u_size

extern HeapAlloc(
    hHeap: ptr u_size,
    dwFlags: i32,
    dwBytes: u_size
):ptr u_mem

extern HeapFree(
    hHeap: ptr u_size,
    dwFlags: i32,
    lpMem: ptr u_mem
):i32

extern Sleep(dwMilliseconds:i32):i32

# Layer 0a: Non-platform specific functions
# We can use portable versions of functions if it's easier.

extern _snprintf(
    buffer: ptr u_mem,
    count: u_size,
    format: ptr u8,
    *args
):i32

# Layer 1
# Platform-level functions we need to have cross-platform interfaces for.
# Used mainly in libraries but accessible to the end user.

def alloc(bytes:u_size):ptr u_mem {
    HeapAlloc(
        GetProcessHeap(),
        0x00000008,
        bytes
    )
}

def free(ptr_to_free:ptr u_mem){
    HeapFree(
        GetProcessHeap(),
        0x00000000,
        ptr_to_free
    )
}

# Layer 2
# Library functions for all users.
# Anything that requires these imports the stdlib

def sleep(msecs:i32):i32 {
    Sleep(msecs)
}

def print(_str:str):i32 {
    
    var bytes_written:i32=0
    var _size = 4096:u_size
    var buffer = alloc(_size)

    var len = _snprintf(
        buffer,
        _size,
        c_data('%s\n'),
        c_data(_str)
    )

    WriteConsoleA(
        GetStdHandle(-11),
        buffer,
        len,
        ref(bytes_written)
    )

    free(buffer)
    bytes_written
}

# -----------------------

def g(x:str="Hi there"){
    print(x)
}

def main(){
    print ("Hello world!")
    sleep(1000)
    print ("Goodbye world!")
}
# test