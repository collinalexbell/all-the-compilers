# Conway's Game Of Life in Aki

# Stuff to eventually be turned into libraries
# --------------------------------

# non-macro print

extern printf_s(_format:ptr u8, *args):i32

@inline
def print(_str:str):i32 {
    printf_s(c_data(_str))
}

# rand

extern rand():i32

@inline
def rnd(_min:i32, _max:i32):i32 {
    rand() / (32767 / ((_max+1) - _min)) +_min
}

# inkey

extern _getch():u8

@inline
def inkey():u8 {
    _getch()
}

# Main program
# --------------------------------

const {
    HEIGHT = 40,
    WIDTH = 80,
    GENESIS_FACTOR = 30,
    MUTATION_FACTOR = 5,
    DISPLAY_SIZE = ((WIDTH+1) * HEIGHT) + 1
}

uni {    
    world:array u8[2,HEIGHT,WIDTH],
    output:array u8[DISPLAY_SIZE],
    current_world = 0,
    population = 0,
    generation = 0
    # TODO: allow trailing comma in these types of definitions
}

def setup(){
    var output_index=0
    loop (var x=0, x<HEIGHT) {
        loop (var y=0, y<WIDTH) {
            var val = world[0,x,y] = 
                {if rnd(0,100)<GENESIS_FACTOR 1:u8 else 0:u8}
            output[output_index] =
                {if val 64:u8 else 32:u8}
            output_index+=1
        }
        output[output_index] = 10:u8
        output_index += 1
    }
}

def mutate(){
    loop (var x=0, x<HEIGHT) {
        loop (var y=0, y<WIDTH) {
            if world[current_world,x,y] == 0:u8 {
                world[current_world,x,y] = {if rnd(0,100)<MUTATION_FACTOR 1:u8 else 0:u8}
            }
        }
    }
}

def evolve() {
    var other_world = 1-current_world,
        output_index = 0,
        temp = 0:u8

    population = 0

    loop (var x=0, x<HEIGHT) {
        loop (var y=0, y<WIDTH) {
            var sum=0:u8,
                t=0:u8
            loop (var k=x-1, k<x+2)
                loop (var j=y-1, j<y+2)                     
                    sum+=world[
                        current_world,
                        (k+HEIGHT) % HEIGHT,
                        (j+WIDTH) % WIDTH
                    ]
            t = world[current_world,x,y]
            sum -= t
            temp = world[other_world,x,y] = {
                if sum == 3:u8 1:u8 else if sum == 2:u8 t else 0:u8
            }
            output[output_index]={
                if temp {population+=1 64:u8} else 32:u8
            }
            output_index+=1
        }
        output_index+=1
    }
    
    generation += 1
    current_world = other_world
}

def main(){
    
    setup()
    
    print("Conway's Game Of Life\n[m]: mutate\n[q]: quit\nAny other key evolves pattern\n\n")

    loop () {

        printf_s(c_data("%s\nGeneration %i -- Population %i\n"),c_data(output), generation, population)

        print ('----\n')
        
        var cmd = inkey()

        select cmd {
            case 109:u8 {
                print ("Mutate\n")
                mutate()
                evolve()
            }
            case 113:u8 {
                break
            }
            default
                evolve()
        }

        # add:
        # ord() - compiles to constant if a constant string is supplied

    }

    print ("Goodbye!\n")

    0

}