/*
 * Copyright (c) 2018, Oracle and/or its affiliates.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include <stdio.h>
#include "setup.h"

int main() {
  int val, val2, val3, val4;
  int varargs;

  setupStdin("1");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != 1) {
    abort();
  }

  setupStdin("156456");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != 156456) {
    abort();
  }

  setupStdin(" 42534");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != 42534) {
    abort();
  }

  setupStdin("+56456");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != 56456) {
    abort();
  }

  /*
  setupStdin("++78453");
  varargs = scanf("%d", &val);
  cleanupStdin();
  printf("varargs: %d\n", varargs);
  if (varargs != 0) {
    abort();
  }*/

  setupStdin("+0");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != 0) {
    abort();
  }

  setupStdin("-0");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != 0) {
    abort();
  }

  setupStdin("-54234");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != 1 || val != -54234) {
    abort();
  }

  setupStdin("-54235  4352 +2431 0");
  varargs = scanf("%d%d %d%d", &val, &val2, &val3, &val4);
  cleanupStdin();
  if (varargs != 4 || val != -54235 || val2 != 4352 || val3 != 2431 || val4 != 0) {
    abort();
  }

  setupStdin("");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != -1) {
    printf("asdf\n");
    abort();
  }

  setupStdin(" ");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs != -1) {

    abort();
  }

  setupStdin("z");
  varargs = scanf("%d", &val);
  cleanupStdin();
  if (varargs > 0) {
    abort();
  }

  setupStdin("123434");
  varargs = scanf("%i", &val);
  cleanupStdin();
  if (varargs != 1 || val != 123434) {
    abort();
  }
}
