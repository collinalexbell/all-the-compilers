/*
 * Copyright (c) 2018, Oracle and/or its affiliates.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "setup.h"

int main() {
  char val[200], val2[200], val3[200], val4[200];
  int varargs;

  setupStdin("a");
  varargs = scanf("%s", val);
  cleanupStdin();
  if (varargs != 1 || strcmp("a", val) != 0) {
    abort();
  }

  setupStdin("asdf");
  varargs = scanf("%s", val);
  cleanupStdin();
  if (varargs != 1 || strcmp("asdf", val) != 0) {
    abort();
  }

  setupStdin("asdf y bcvb qwea");
  varargs = scanf("%s%s%s%s", val, val2, val3, val4);
  cleanupStdin();
  if (varargs != 4 || strcmp("asdf", val) != 0 || strcmp("y", val2) != 0 || strcmp("bcvb", val3) != 0 || strcmp("qwea", val4) != 0) {
    abort();
  }

  setupStdin("kjl qwer yxcv z");
  varargs = scanf("%s %s %s %s", val, val2, val3, val4);
  cleanupStdin();
  if (varargs != 4 || strcmp("kjl", val) != 0 || strcmp("qwer", val2) != 0 || strcmp("yxcv", val3) != 0 || strcmp("z", val4) != 0) {
    abort();
  }

  setupStdin("asdf yxcv hff");
  varargs = scanf("%s yxcv %s", val, val2);
  cleanupStdin();
  if (varargs != 2 || strcmp("asdf", val) != 0 || strcmp("hff", val2) != 0) {
    abort();
  }

  setupStdin("uipo yxcv hff");
  varargs = scanf("%syxcv%s", val, val2);
  cleanupStdin();
  if (varargs != 1 || strcmp("uipo", val) != 0) {
    printf("%d", varargs);
    abort();
  }

  setupStdin("");
  varargs = scanf("%s %s", &val, &val2);
  cleanupStdin();
  if (varargs != -1) {
    abort();
  }

  setupStdin("    ");
  varargs = scanf("%s %s", &val, &val2);
  cleanupStdin();
  if (varargs != -1) {
    abort();
  }

  setupStdin("  a  b   ");
  varargs = scanf("%s %s", &val, &val2);
  cleanupStdin();
  if (varargs != 2 || strcmp("a", val) != 0 || strcmp("b", val2) != 0) {
    abort();
  }

  setupStdin("  c    ");
  varargs = scanf("%s %s", &val, &val2);
  cleanupStdin();

  if (varargs != 1 || strcmp("c", val) != 0) {
    abort();
  }
}
