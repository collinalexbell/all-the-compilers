["do",

["load", ["`", "miniMAL-core.json"]],
["load", ["`", "types.json"]],
["load", ["`", "reader.json"]],
["load", ["`", "printer.json"]],
["load", ["`", "env.json"]],
["load", ["`", "core.json"]],

["def", "READ", ["fn", ["strng"], ["read-str", "strng"]]],

["def", "eval-ast", ["fn", ["ast", "env"],
  ["if", ["symbol?", "ast"],
    ["env-get", "env", "ast"],
  ["if", ["list?", "ast"],
    ["map", ["fn", ["x"], ["EVAL", "x", "env"]], "ast"],
  ["if", ["vector?", "ast"],
    ["vectorl", ["map", ["fn", ["x"], ["EVAL", "x", "env"]], "ast"]],
  ["if", ["map?", "ast"],
    ["let", ["new-hm", ["hash-map"]],
      ["do",
        ["map", ["fn", ["k"], ["set", "new-hm",
                                ["EVAL", "k", "env"],
                                ["EVAL", ["get", "ast", "k"], "env"]]],
                ["keys", "ast"]],
        "new-hm"]],
  "ast"]]]]]],

["def", "LET", ["fn", ["env", "args"],
  ["if", [">", ["count", "args"], 0],
    ["do",
      ["env-set", "env", ["nth", "args", 0],
                         ["EVAL", ["nth", "args", 1], "env"]],
      ["LET", "env", ["rest", ["rest", "args"]]]]]]],

["def", "EVAL", ["fn", ["ast", "env"],
  ["if", ["not", ["list?", "ast"]],
        ["eval-ast", "ast", "env"],
        ["if", ["empty?", "ast"],
          "ast",
          ["let", ["a0", ["get", ["first", "ast"], ["`", "val"]]],
            ["if", ["=", ["`", "def!"], "a0"],
              ["env-set", "env", ["nth", "ast", 1],
                                 ["EVAL", ["nth", "ast", 2], "env"]],
            ["if", ["=", ["`", "let*"], "a0"],
              ["let", ["let-env", ["env-new", "env"]],
                ["do",
                  ["LET", "let-env", ["nth", "ast", 1]],
                  ["EVAL", ["nth", "ast", 2], "let-env"]]],
            ["if", ["=", ["`", "do"], "a0"],
              ["do",
                ["eval-ast", ["slice", "ast", 1, ["-", ["count", "ast"], 1]], "env"],
                ["EVAL", ["nth", "ast", ["-", ["count", "ast"], 1]], "env"]],
            ["if", ["=", ["`", "if"], "a0"],
              ["let", ["cond", ["EVAL", ["nth", "ast", 1], "env"]],
                ["if", ["or", ["=", "cond", null], ["=", "cond", false]],
                  ["if", [">", ["count", "ast"], 3],
                    ["EVAL", ["nth", "ast", 3], "env"],
                    null],
                  ["EVAL", ["nth", "ast", 2], "env"]]],
            ["if", ["=", ["`", "fn*"], "a0"],
              ["malfunc",
                ["fn", ["&", "args"],
                  ["let", ["e", ["env-new", "env", ["nth", "ast", 1], "args"]],
                    ["EVAL", ["nth", "ast", 2], "e"]]],
                ["nth", "ast", 2], "env", ["nth", "ast", 1]],
              ["let", ["el", ["eval-ast", "ast", "env"],
                       "f", ["first", "el"],
                       "args", ["rest", "el"]],
                ["if", ["malfunc?", "f"],
                  ["EVAL", ["get", "f", ["`", "ast"]],
                           ["env-new", ["get", "f", ["`", "env"]],
                                       ["get", "f", ["`", "params"]],
                                       "args"]],
                  ["apply", "f", "args"]]]]]]]]]]]]],

["def", "PRINT", ["fn", ["exp"],
  ["pr-str", "exp", true]]],


["def", "repl-env", ["env-new"]],

["def", "rep", ["fn", ["strng"],
  ["try",
    ["PRINT", ["EVAL", ["READ", "strng"], "repl-env"]],
    ["catch", "exc",
      ["str", ["`", "Error: "],
        ["if", ["isa", "exc", "Error"],
          [".", "exc", ["`", "toString"]],
          ["pr-str", "exc", true]]]]]]],

["`", "core.mal: defined using miniMAL"],
["map", ["fn", ["k"], ["env-set", "repl-env",
                                  ["symbol", "k"],
                                  ["get", "core-ns", "k"]]],
        ["keys", "core-ns"]],
["env-set", "repl-env", ["symbol", ["`", "eval"]],
                        ["fn", ["ast"], ["EVAL", "ast", "repl-env"]]],
["env-set", "repl-env", ["symbol", ["`", "*ARGV*"]],
                        ["slice", "ARGS", 1]],

["`", "core.mal: defined using mal itself"],
["rep", ["`", "(def! not (fn* (a) (if a false true)))"]],
["rep", ["`", "(def! load-file (fn* (f) (eval (read-string (str \"(do \" (slurp f) \"\nnil)\")))))"]],

["if", ["not", ["empty?", "ARGS"]],
  ["rep", ["str", ["`", "(load-file \""], ["get", "ARGS", 0], ["`", "\")"]]],
  ["repl", ["`", "user> "], "rep"]],

null

]
