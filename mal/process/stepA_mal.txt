--- stepA_mal -------------------------------
import types, reader, printer, env, core

READ(str): return reader.read_str(str)

quasiquote(ast): return ... // quasiquote

macro?(ast, env): return ... // true if macro call
macroexpand(ast, env): return ... // recursive macro expansion

eval_ast(ast,env):
  switch type(ast):
    symbol:      return env.get(ast)
    list,vector: return ast.map((x) -> EVAL(x,env))
    hash:        return ast.map((k,v) -> list(k, EVAL(v,env)))
    _default_:   return ast

EVAL(ast,env):
  while true:
    if not list?(ast): return eval_ast(ast, env)

    ast = macroexpand(ast, env)
    if not list?(ast): return eval_ast(ast, env)
    if empty?(ast): return ast

    switch ast[0]:
      'def!:        return env.set(ast[1], EVAL(ast[2], env))
      'let*:        env = ...; ast = ast[2] // TCO
      'quote:       return ast[1]
      'quasiquote:  ast = quasiquote(ast[1]) // TCO
      'defmacro!:   return ... // like def!, but set macro property
      'macroexpand: return macroexpand(ast[1], env)
      'try*:        return ... // try/catch native and malval exceptions
      'do:          ast = eval_ast(ast[1..-1], env)[-1] // TCO
      'if:          EVAL(ast[1], env) ? ast = ast[2] : ast = ast[3] // TCO
      'fn*:         return new MalFunc(...)
      _default_:    f, args = eval_ast(ast, env)
                    if malfunc?(f): ast = f.fn; env = ... // TCO
                    else:           return apply(f, args)

PRINT(exp): return printer.pr_str(exp)

repl_env = new Env()
rep(str): return PRINT(EVAL(READ(str),repl_env))

;; core.EXT: defined using Racket
core.ns.map((k,v) -> (repl_env.set(k, v)))
repl_env.set('eval, (ast) -> EVAL(ast, repl-env))
repl_env.set('*ARGV*, cmdline_args[1..])

;; core.mal: defined using the language itself
rep("(def! *host-language* \"racket\")")
rep("(def! not (fn* (a) (if a false true)))")
rep("(def! load-file (fn* (f) (eval (read-string (str \"(do \" (slurp f) \"\nnil)\")))))")
rep("(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (count xs) 1) (nth xs 1) (throw \"odd number of forms to cond\")) (cons 'cond (rest (rest xs)))))))");

if cmdline_args: rep("(load-file \"" + args[0] + "\")"); exit 0

rep("(println (str \"Mal [\" *host-language* \"]\"))")
main loop:
  try:      println(rep(readline("user> ")))
  catch e:  println("Error: ", e)

--- env module ----------------------------------
class Env (outer=null,binds=[],exprs=[])
    data = hash_map()
    foreach b, i in binds:
      if binds[i] == '&: data[binds[i+1]] = exprs.drop(i); break
      else: data[binds[i]] = exprs[i]
  set(k,v): return data.set(k,v)
  find(k): return data.has(k) ? this : (if outer ? find(outer) : null)
  get(k): return data.find(k).get(k) OR raise "'" + k + "' not found"

--- core module ---------------------------------
ns = {'=:        equal?,
      'throw:    throw,

      'nil?:     nil?,
      'true?:    true?,
      'false?:   false?,
      'string?:  string?,
      'symbol:   symbol,
      'symbol?:  symbol?,
      'keyword:  keyword,
      'keyword?: keyword?,
      'number?:  number?,
      'fn?:      fn?,
      'macro?:   macro?,

      'pr-str:   (a) -> a.map(|s| pr_str(e,true)).join(" ")),
      'str:      (a) -> a.map(|s| pr_str(e,false)).join("")),
      'prn:      (a) -> println(a.map(|s| pr_str(e,true)).join(" ")),
      'println:  (a) -> println(a.map(|s| pr_str(e,false)).join(" ")),
      'read-string: read_str,
      'readline: readline,
      'slurp     read-file,

      '<:        lt,
      '<=:       lte,
      '>:        gt,
      '>=:       gte,
      '+:        add,
      '-:        sub,
      '*:        mult,
      '/:        div,
      'time-ms   cur-epoch-millis,

      'list:     list,
      'list?:    list?,
      'vector:   vector,
      'vector?:  vector?,
      'hash-map: hash_map,
      'map?:     hash_map?,
      'assoc:    assoc,
      'dissoc:   dissoc,
      'get:      get,
      'contains?: contains?,
      'keys:     keys,
      'vals:     vals,

      'sequential? sequential?,
      'cons:     (a) -> concat([a[0]], a[1]),
      'concat:   (a) -> reduce(concat, [], a),
      'vec:      (l) -> l converted to vector,
      'nth:      (a) -> a[0][a[1]] OR raise "nth: index out of range",
      'first:    (a) -> a[0][0] OR nil,
      'rest:     (a) -> a[0][1..] OR list(),
      'empty?:   empty?,
      'count:    count,
      'apply:    apply,
      'map:      map,

      'conj:     conj,
      'seq:      seq,

      'meta:     (a) -> a[0].meta,
      'with-meta: (a) -> a[0].with_meta(a[1]),
      'atom:     (a) -> new Atom(a[0]),
      'atom?:    (a) -> type(a[0]) == "atom",
      'deref:    (a) -> a[0].val,
      'reset!:   (a) -> a[0].val = a[1],
      'swap!:    swap!}
