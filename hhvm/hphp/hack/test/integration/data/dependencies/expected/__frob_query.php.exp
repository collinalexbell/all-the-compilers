<?hh

interface IContext {}

interface IUniverse {
  abstract const type TContext as \IContext;
}

class Universe implements \IUniverse {
  const type TContext = \IContext;
}

interface ICreation {
  const type TContext = this::TUniverse::TContext;

  abstract const type TUniverse as \IUniverse;
}

abstract class BaseQuery<TContext> {}

abstract class Query extends \BaseQuery<this::TContext> {
  const type TContext = this::TCreation::TContext;

  abstract const type TCreation as \ICreation;
}

class Frob implements \ICreation {
  const type TUniverse = \Universe;
}

trait TFrobQuery {
  require extends \BaseQuery<\Frob::TContext>;
}

final class FrobQuery extends \Query {
  use \TFrobQuery;

  const type TCreation = \Frob;
}

function frob_query(): FrobQuery {
  return new FrobQuery();
}
