<?hh

interface IFlob {
  public static function f2(): this::T;

  public function f1(): void;

  abstract const type T;
}

interface IToto {
  const type T = int;
}

abstract class FlobBase {
  public static function f2(): int {
    throw new \Exception();
  }

  public function f1(): void {
    throw new \Exception();
  }
}

final class Flob extends \FlobBase implements \IFlob, \IToto {
  use \TFlob;
}

trait TFlob {
  require implements \IFlob;

  public function g(Flob $_): void {
    $this->f1();
    $_ = static::f2();
  }
}
