=== IFC analysis results for purpose.php
Analyzing __construct:
* pc: pc
* This: \D<D, D_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $di -> <$di> }
* Final environment:
  Deps: {}
  Constraints:
    [5:42-45] D < D_lump, pc < D_lump, $di < D_lump
  Locals:
    { $di -> <$di> }

Analyzing __construct:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $ci -> <$ci>; $d -> \D<D, D_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [12:16-19] C < SECRET, pc < SECRET, $ci < SECRET
    [14:14-16] C < SECRET, pc < SECRET, D_lump = SECRET, D < SECRET
  Locals:
    { $ci -> <$ci>; $d -> \D<D, D_lump> }

Analyzing getShallow1:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  {}
* Final environment:
  Deps: {}
  Constraints:
    [19:5-22] SECRET < .ci, C < .ci, .ci < ret
  Locals:
    {}

Analyzing getShallow2:
* pc: pc
* This: \C<C, C_lump>
* Return: \D<D, D_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  {}
* Final environment:
  Deps: {}
  Constraints:
    [24:5-21] SECRET < .d, C < .d, D_lump = SECRET, .d < D
  Locals:
    {}

Analyzing getDeep:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  {}
* Final environment:
  Deps: {}
  Constraints:
    [29:5-25] SECRET < .d, C < .d, SECRET < .di, .d < .di, .di < ret
  Locals:
    {}

Analyzing writeDeep:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  {}
* Final environment:
  Deps: {}
  Constraints:
    [34:5-23] SECRET < .d, C < .d, .d < SECRET, pc < SECRET, lit < SECRET
  Locals:
    {}

