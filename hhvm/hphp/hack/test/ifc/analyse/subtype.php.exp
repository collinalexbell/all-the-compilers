=== IFC analysis results for subtype.php
Analyzing \B_A:
* pc: pc
* This: None
* Return: \A<A, A_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> \B<B, B_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [10:43-53] A_lump = B_lump, B < A
  Locals:
    { $x -> \B<B, B_lump> }

Analyzing \C_A:
* pc: pc
* This: None
* Return: \A<A, A_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> \C<C, C_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [11:43-53] A_lump = C_lump, C < A
  Locals:
    { $x -> \C<C, C_lump> }

Analyzing \nonnull_mixed:
* pc: pc
* This: None
* Return: (null<ret> | nonnull<ret'1,ret'2>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> nonnull<$x,$x'1> }
* Final environment:
  Deps: {}
  Constraints:
    [14:63-73] $x < ret'1, $x'1 = ret'2
  Locals:
    { $x -> nonnull<$x,$x'1> }

Analyzing \int_opt_int:
* pc: pc
* This: None
* Return: (null<ret> | <ret'1>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> <$x> }
* Final environment:
  Deps: {}
  Constraints:
    [15:63-73] $x < ret'1
  Locals:
    { $x -> <$x> }

Analyzing \null_opt_int:
* pc: pc
* This: None
* Return: (null<ret> | <ret'1>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> null<$x> }
* Final environment:
  Deps: {}
  Constraints:
    [16:63-73] $x < ret
  Locals:
    { $x -> null<$x> }

Analyzing \A_opt_A:
* pc: pc
* This: None
* Return: (null<ret> | \A<A, A_lump>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> \A<A'1, A_lump'1> }
* Final environment:
  Deps: {}
  Constraints:
    [17:63-73] A_lump = A_lump'1, A'1 < A
  Locals:
    { $x -> \A<A'1, A_lump'1> }

Analyzing \null_opt_A:
* pc: pc
* This: None
* Return: (null<ret> | \A<A, A_lump>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> null<$x> }
* Final environment:
  Deps: {}
  Constraints:
    [18:63-73] $x < ret
  Locals:
    { $x -> null<$x> }

Analyzing \A_mixed:
* pc: pc
* This: None
* Return: (null<ret> | nonnull<ret'1,ret'2>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> \A<A, A_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [19:63-73] A < ret'1, A_lump = ret'2
  Locals:
    { $x -> \A<A, A_lump> }

Analyzing \null_mixed:
* pc: pc
* This: None
* Return: (null<ret> | nonnull<ret'1,ret'2>)
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> null<$x> }
* Final environment:
  Deps: {}
  Constraints:
    [20:63-73] $x < ret
  Locals:
    { $x -> null<$x> }

Analyzing \dict_prim_key:
* pc: pc
* This: None
* Return: dict<<ret'1> => <ret>; |len|>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> dict<<$x'1> => <$x>; |len'1|> }
* Final environment:
  Deps: {}
  Constraints:
    [24:58-68] $x'1 < ret'1, $x < ret, len'1 < len
  Locals:
    { $x -> dict<<$x'1> => <$x>; |len'1|> }

Analyzing \dict_class_key:
* pc: pc
* This: None
* Return: dict<<ret> => \C<C, C_lump>; |len|>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> dict<<$x> => \C<C'1, C_lump'1>; |len'1|> }
* Final environment:
  Deps: {}
  Constraints:
    [26:58-68] $x < ret, C_lump = C_lump'1, C'1 < C, len'1 < len
  Locals:
    { $x -> dict<<$x> => \C<C'1, C_lump'1>; |len'1|> }

Analyzing \dict_kt:
* pc: pc
* This: None
* Return: \HH\KeyedTraversable<HH\KeyedTraversable, HH\KeyedTraversable_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> dict<<$x> => \C<C, C_lump>; |len|> }
* Final environment:
  Deps: {}
  Constraints:
    [28:58-68]
      $x < HH\KeyedTraversable, C < HH\KeyedTraversable,
      len < HH\KeyedTraversable, C_lump = HH\KeyedTraversable_lump
  Locals:
    { $x -> dict<<$x> => \C<C, C_lump>; |len|> }

Analyzing \vec_prim_vec_mixed:
* pc: pc
* This: None
* Return: vec<<key> => (null<ret> | nonnull<ret'1,ret'2>); |len|>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> vec<<key'1> => <$x>; |len'1|> }
* Final environment:
  Deps: {}
  Constraints:
    [32:45-55] key'1 < key, $x < ret'1, len'1 < len
  Locals:
    { $x -> vec<<key'1> => <$x>; |len'1|> }

Analyzing \vec_B_vec_A:
* pc: pc
* This: None
* Return: vec<<key> => \A<A, A_lump>; |len|>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> vec<<key'1> => \B<B, B_lump>; |len'1|> }
* Final environment:
  Deps: {}
  Constraints:
    [34:45-55] key'1 < key, A_lump = B_lump, B < A, len'1 < len
  Locals:
    { $x -> vec<<key'1> => \B<B, B_lump>; |len'1|> }

Analyzing \vec_kt:
* pc: pc
* This: None
* Return: \HH\KeyedTraversable<HH\KeyedTraversable, HH\KeyedTraversable_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> vec<<key> => \C<C, C_lump>; |len|> }
* Final environment:
  Deps: {}
  Constraints:
    [36:45-55]
      C < HH\KeyedTraversable, key < HH\KeyedTraversable,
      len < HH\KeyedTraversable, C_lump = HH\KeyedTraversable_lump
  Locals:
    { $x -> vec<<key> => \C<C, C_lump>; |len|> }

Analyzing \keyset_key:
* pc: pc
* This: None
* Return: keyset<<ret> => <ret>; |len|>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> keyset<<$x> => <$x>; |len'1|> }
* Final environment:
  Deps: {}
  Constraints:
    [40:49-59] $x < ret, $x < ret, len'1 < len
  Locals:
    { $x -> keyset<<$x> => <$x>; |len'1|> }

Analyzing \keyset_kt:
* pc: pc
* This: None
* Return: \HH\KeyedTraversable<HH\KeyedTraversable, HH\KeyedTraversable_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $x -> keyset<<$x> => <$x>; |len|> }
* Final environment:
  Deps: {}
  Constraints:
    [42:49-59] $x < HH\KeyedTraversable, len < HH\KeyedTraversable
  Locals:
    { $x -> keyset<<$x> => <$x>; |len|> }

