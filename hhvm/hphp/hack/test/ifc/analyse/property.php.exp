=== IFC analysis results for property.php
Analyzing __construct:
* pc: pc
* This: \My<My, My_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $mBool -> <$mBool>;
    $mInt -> <$mInt>;
    $other -> \Other<Other, Other_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [13:16-21] My < MINT, pc < MINT, $mInt < MINT
    [15:18-24] My < OTHER, pc < OTHER, Other_lump = OTHER, Other < OTHER
    [16:17-23] My < My_lump, pc < My_lump, $mBool < My_lump
  Locals:
    { $mBool -> <$mBool>;
      $mInt -> <$mInt>;
      $other -> \Other<Other, Other_lump> }

Analyzing getMInt:
* pc: pc
* This: \My<My, My_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  {}
* Final environment:
  Deps: {}
  Constraints:
    [21:5-24] MINT < .mInt, My < .mInt, .mInt < ret
  Locals:
    {}

Analyzing setMInt:
* pc: pc
* This: \My<My, My_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $candidate -> <$candidate> }
* Final environment:
  Deps: {}
  Constraints:
    [26:5-30] My < MINT, pc < MINT, $candidate < MINT
  Locals:
    { $candidate -> <$candidate> }

Analyzing \tlGetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $obj -> \My<My, My_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [32:3-21] MINT < .mInt, My < .mInt, .mInt < ret
  Locals:
    { $obj -> \My<My, My_lump> }

Analyzing \tlSetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $obj -> \My<My, My_lump>; $val -> <$val> }
* Final environment:
  Deps: {}
  Constraints:
    [37:3-21] My < MINT, pc < MINT, $val < MINT
  Locals:
    { $obj -> \My<My, My_lump>; $val -> <$val> }

Analyzing \tlGetOther:
* pc: pc
* This: None
* Return: \Other<Other, Other_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $obj -> \My<My, My_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [42:3-22] OTHER < .other, My < .other, Other_lump = OTHER, .other < Other
  Locals:
    { $obj -> \My<My, My_lump> }

Analyzing \tlGetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $obj -> \My<My, My_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [47:3-29]
      OTHER < .other, My < .other, OBOOL < .oBool, .other < .oBool,
      .oBool < ret
  Locals:
    { $obj -> \My<My, My_lump> }

Analyzing \tlSetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $bool -> <$bool>; $obj -> \My<My, My_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [52:3-30]
      OTHER < .other, My < .other, .other < OBOOL, pc < OBOOL, $bool < OBOOL
  Locals:
    { $bool -> <$bool>; $obj -> \My<My, My_lump> }

