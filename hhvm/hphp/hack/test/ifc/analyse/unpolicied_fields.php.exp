=== IFC analysis results for unpolicied_fields.php
Analyzing __construct:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $cd -> \D<D, D_lump>; $cx -> <$cx>; $cy -> <$cy> }
* Final environment:
  Deps: {}
  Constraints:
    [7:16-19] C < PUBLIC, pc < PUBLIC, $cx < PUBLIC
    [8:16-19] C < C_lump, pc < C_lump, $cy < C_lump
    [9:14-17] C < C_lump, pc < C_lump, C_lump = D_lump, D < C_lump
  Locals:
    { $cd -> \D<D, D_lump>; $cx -> <$cx>; $cy -> <$cy> }

Analyzing testGetUnpolicied:
* pc: pc
* This: \C<C, C_lump>
* Return: \D<D, D_lump>
* Exception: \Exception<exn, exn_lump>
* Params:
  {}
* Final environment:
  Deps: {}
  Constraints:
    [14:5-22] C_lump < .cd, C < .cd, C_lump = D_lump, .cd < D
  Locals:
    {}

Analyzing testSetMultipleUnpolicied:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $d -> \D<D, D_lump> }
* Final environment:
  Deps: {}
  Constraints:
    [19:5-20] C < C_lump, pc < C_lump, lit < C_lump
    [20:5-20] C < C_lump, pc < C_lump, C_lump = D_lump, D < C_lump
  Locals:
    { $d -> \D<D, D_lump> }

Analyzing testSetDeep:
* pc: pc
* This: \C<C, C_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $i -> <$i> }
* Final environment:
  Deps: {}
  Constraints:
    [25:5-24] C_lump < .cd, C < .cd, .cd < C_lump, pc < C_lump, $i < C_lump
  Locals:
    { $i -> <$i> }

Analyzing __construct:
* pc: pc
* This: \D<D, D_lump>
* Return: <ret>
* Exception: \Exception<exn, exn_lump>
* Params:
  { $di -> <$di> }
* Final environment:
  Deps: {}
  Constraints:
    [31:42-45] D < D_lump, pc < D_lump, $di < D_lump
  Locals:
    { $di -> <$di> }

