[(Class
    { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = false; c_has_xhp_keyword = false; c_kind = Cnormal; 
      c_name = ([3:7-15], "\\TestPair"); c_tparams = []; c_extends = []; 
      c_uses = []; c_use_as_alias = []; c_insteadof_alias = []; c_xhp_attr_uses = []; 
      c_xhp_category = None; c_reqs = []; c_implements = []; c_support_dynamic_type = false; 
      c_where_constraints = []; c_consts = []; c_typeconsts = []; c_vars = [];
      c_methods =
      [{ m_span = [4:3-48]; m_annotation = (); m_final = false; m_abstract = false; 
         m_static = false; m_readonly_this = false; m_visibility = Public; 
         m_name = ([4:19-20], "b"); m_tparams = []; m_where_constraints = []; 
         m_variadic = FVnonVariadic;
         m_params =
         [{ param_annotation = ([4:36-38], Pair<int, int>);
            param_type_hint = ((Pair<int, int>), (Some ([4:21-35], (Happly (([4:21-25], "\\HH\\Pair"), [([4:26-29], (Hprim Tint)); ([4:31-34], (Hprim Tint))]))))); 
            param_is_variadic = false; param_pos = [4:36-38]; param_name = "$b"; 
            param_expr = None; param_readonly = None; param_callconv = None; 
            param_user_attributes = []; param_visibility = None }
           ];
         m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([Pos.none], Noop)]; fb_annotation = () }; 
         m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
         m_ret = ((void), (Some ([4:41-45], (Hprim Tvoid)))); m_external = false; 
         m_doc_comment = None }
        ];
      c_attributes = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
        ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_enum = None; 
      c_doc_comment = None; c_emit_id = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
         ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; 
         ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict;
       fd_fun =
       { f_span = [7:1-39]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([7:32-36], (Hprim Tvoid)))); 
         f_name = ([7:10-11], "\\b"); f_tparams = []; f_where_constraints = []; 
         f_variadic = FVnonVariadic;
         f_params =
         [{ param_annotation = ([7:27-29], Pair<int, int>);
            param_type_hint = ((Pair<int, int>), (Some ([7:12-26], (Happly (([7:12-16], "\\HH\\Pair"), [([7:17-20], (Hprim Tint)); ([7:22-25], (Hprim Tint))]))))); 
            param_is_variadic = false; param_pos = [7:27-29]; param_name = "$b"; 
            param_expr = None; param_readonly = None; param_callconv = None; 
            param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)]; fb_annotation = () }; 
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None }
       });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
         ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; 
         ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict;
       fd_fun =
       { f_span = [9:1-24:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([12:4-8], (Hprim Tvoid)))); 
         f_name = ([9:10-19], "\\call_pair"); f_tparams = []; f_where_constraints = []; 
         f_variadic = FVnonVariadic;
         f_params =
         [{ param_annotation = ([10:19-22], Pair<bool, int>);
            param_type_hint = ((Pair<bool, int>), (Some ([10:3-18], (Happly (([10:3-7], "\\HH\\Pair"), [([10:8-12], (Hprim Tbool)); ([10:14-17], (Hprim Tint))]))))); 
            param_is_variadic = false; param_pos = [10:19-22]; param_name = "$b1"; 
            param_expr = None; param_readonly = None; param_callconv = None; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = ([11:19-22], Pair<int, bool>);
             param_type_hint = ((Pair<int, bool>), (Some ([11:3-18], (Happly (([11:3-7], "\\HH\\Pair"), [([11:8-11], (Hprim Tint)); ([11:13-17], (Hprim Tbool))]))))); 
             param_is_variadic = false; param_pos = [11:19-22]; param_name = "$b2"; 
             param_expr = None; param_readonly = None; param_callconv = None; 
             param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([14:3-10],
             (Expr
                (([14:3-9], void),
                 (Call ((([14:3-4], (function(Pair<int, int> $b): void)), (Id ([14:3-4], "\\b"))), 
                    [], [(([14:5-8], Pair<bool, int>), (Hole ((([14:5-8], Pair<bool, int>), (Lvar ([14:5-8], $b1))), (Pair<bool, int>), (Pair<int, int>), Typing)))], None)))));
             ([16:3-10],
              (Expr
                 (([16:3-9], void),
                  (Call ((([16:3-4], (function(Pair<int, int> $b): void)), (Id ([16:3-4], "\\b"))), 
                     [], [(([16:5-8], Pair<int, bool>), (Hole ((([16:5-8], Pair<int, bool>), (Lvar ([16:5-8], $b2))), (Pair<int, bool>), (Pair<int, int>), Typing)))], None)))));
             ([18:3-25],
              (Expr
                 (([18:3-24], TestPair),
                  (Binop ((Eq None), (([18:3-7], TestPair), (Lvar ([18:3-7], $foo))),
                     (([18:10-24], TestPair), (New ((([18:14-22], TestPair), (CI ([18:14-22], "\\TestPair"))), [], [], None, ([18:14-22], _)))))))));
             ([21:3-16],
              (Expr
                 (([21:3-15], void),
                  (Call (
                     (([21:3-10], (function(Pair<int, int> $b): void)),
                      (Obj_get ((([21:3-7], TestPair), (Lvar ([21:3-7], $foo))), (([21:9-10], (function(Pair<int, int> $b): void)), (Id ([21:9-10], "b"))), OG_nullthrows, false))),
                     [], [(([21:11-14], Pair<bool, int>), (Hole ((([21:11-14], Pair<bool, int>), (Lvar ([21:11-14], $b1))), (Pair<bool, int>), (Pair<int, int>), Typing)))], None)))));
             ([23:3-16],
              (Expr
                 (([23:3-15], void),
                  (Call (
                     (([23:3-10], (function(Pair<int, int> $b): void)),
                      (Obj_get ((([23:3-7], TestPair), (Lvar ([23:3-7], $foo))), (([23:9-10], (function(Pair<int, int> $b): void)), (Id ([23:9-10], "b"))), OG_nullthrows, false))),
                     [], [(([23:11-14], Pair<int, bool>), (Hole ((([23:11-14], Pair<int, bool>), (Lvar ([23:11-14], $b2))), (Pair<int, bool>), (Pair<int, int>), Typing)))], None)))))
             ];
           fb_annotation = () };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None }
       });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
         ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; 
         ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict;
       fd_fun =
       { f_span = [26:1-41:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([29:4-8], (Hprim Tvoid)))); 
         f_name = ([26:10-24], "\\call_pair_cast"); f_tparams = []; f_where_constraints = []; 
         f_variadic = FVnonVariadic;
         f_params =
         [{ param_annotation = ([27:19-22], Pair<bool, int>);
            param_type_hint = ((Pair<bool, int>), (Some ([27:3-18], (Happly (([27:3-7], "\\HH\\Pair"), [([27:8-12], (Hprim Tbool)); ([27:14-17], (Hprim Tint))]))))); 
            param_is_variadic = false; param_pos = [27:19-22]; param_name = "$b1"; 
            param_expr = None; param_readonly = None; param_callconv = None; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = ([28:19-22], Pair<int, bool>);
             param_type_hint = ((Pair<int, bool>), (Some ([28:3-18], (Happly (([28:3-7], "\\HH\\Pair"), [([28:8-11], (Hprim Tint)); ([28:13-17], (Hprim Tbool))]))))); 
             param_is_variadic = false; param_pos = [28:19-22]; param_name = "$b2"; 
             param_expr = None; param_readonly = None; param_callconv = None; 
             param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([31:3-63],
             (Expr
                (([31:3-62], void),
                 (Call ((([31:3-4], (function(Pair<int, int> $b): void)), (Id ([31:3-4], "\\b"))), 
                    [], [(([31:5-61], Pair<int, int>), (Hole ((([31:57-60], Pair<bool, int>), (Lvar ([31:57-60], $b1))), (Pair<bool, int>), (Pair<int, int>), UnsafeCast)))], None)))));
             ([33:3-63],
              (Expr
                 (([33:3-62], void),
                  (Call ((([33:3-4], (function(Pair<int, int> $b): void)), (Id ([33:3-4], "\\b"))), 
                     [], [(([33:5-61], Pair<int, int>), (Hole ((([33:57-60], Pair<int, bool>), (Lvar ([33:57-60], $b2))), (Pair<int, bool>), (Pair<int, int>), UnsafeCast)))], None)))));
             ([35:3-25],
              (Expr
                 (([35:3-24], TestPair),
                  (Binop ((Eq None), (([35:3-7], TestPair), (Lvar ([35:3-7], $foo))),
                     (([35:10-24], TestPair), (New ((([35:14-22], TestPair), (CI ([35:14-22], "\\TestPair"))), [], [], None, ([35:14-22], _)))))))));
             ([38:3-69],
              (Expr
                 (([38:3-68], void),
                  (Call (
                     (([38:3-10], (function(Pair<int, int> $b): void)),
                      (Obj_get ((([38:3-7], TestPair), (Lvar ([38:3-7], $foo))), (([38:9-10], (function(Pair<int, int> $b): void)), (Id ([38:9-10], "b"))), OG_nullthrows, false))),
                     [], [(([38:11-67], Pair<int, int>), (Hole ((([38:63-66], Pair<bool, int>), (Lvar ([38:63-66], $b1))), (Pair<bool, int>), (Pair<int, int>), UnsafeCast)))], None)))));
             ([40:3-69],
              (Expr
                 (([40:3-68], void),
                  (Call (
                     (([40:3-10], (function(Pair<int, int> $b): void)),
                      (Obj_get ((([40:3-7], TestPair), (Lvar ([40:3-7], $foo))), (([40:9-10], (function(Pair<int, int> $b): void)), (Id ([40:9-10], "b"))), OG_nullthrows, false))),
                     [], [(([40:11-67], Pair<int, int>), (Hole ((([40:63-66], Pair<int, bool>), (Lvar ([40:63-66], $b2))), (Pair<int, bool>), (Pair<int, int>), UnsafeCast)))], None)))))
             ];
           fb_annotation = () };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None }
       })