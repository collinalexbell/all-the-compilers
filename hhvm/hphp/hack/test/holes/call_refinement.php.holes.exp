[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
        ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict;
      fd_fun =
      { f_span = [2:1-4:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((dynamic), (Some ([2:54-61], Hdynamic))); 
        f_name = ([2:10-13], "\\foo");
        f_tparams =
        [{ tp_variance = Invariant; tp_name = ([2:14-15], "T"); tp_parameters = [];
           tp_constraints = [(Constraint_as, ([2:19-33], (Hoption ([2:20-33], (Happly (([2:20-29], "\\HH\\Container"), [([2:30-32], (Habstr ("Tv", [])))]))))))]; 
           tp_reified = Erased; tp_user_attributes = [] };
          { tp_variance = Invariant; tp_name = ([2:35-37], "Tv"); tp_parameters = []; tp_constraints = []; tp_reified = Erased; tp_user_attributes = [] }];
        f_where_constraints = []; f_variadic = FVnonVariadic;
        f_params =
        [{ param_annotation = ([2:47-51], T); param_type_hint = ((T), (Some ([2:45-46], (Habstr ("T", []))))); 
           param_is_variadic = false; param_pos = [2:47-51]; param_name = "$arr"; 
           param_expr = None; param_readonly = None; param_callconv = (Some Pinout); 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([3:3-16], (Return (Some (([3:10-15], bool), False))))]; fb_annotation = () }; 
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None }
      });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
         ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; 
         ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict;
       fd_fun =
       { f_span = [5:1-7:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((dynamic), (Some ([5:17-24], Hdynamic))); 
         f_name = ([5:10-13], "\\bar"); f_tparams = []; f_where_constraints = []; 
         f_variadic = FVnonVariadic; f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body = { fb_ast = [([6:3-19], (Return (Some (([6:10-18], vec<nothing>), (ValCollection (Vec, None, []))))))]; fb_annotation = () }; 
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None }
       });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
         ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; 
         ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict;
       fd_fun =
       { f_span = [8:1-10:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((Tv), (Some ([8:48-50], (Habstr ("Tv", []))))); 
         f_name = ([8:10-13], "\\qux");
         f_tparams =
         [{ tp_variance = Invariant; tp_name = ([8:14-15], "T"); tp_parameters = [];
            tp_constraints = [(Constraint_as, ([8:19-33], (Hoption ([8:20-33], (Happly (([8:20-29], "\\HH\\Container"), [([8:30-32], (Habstr ("Tv", [])))]))))))]; 
            tp_reified = Erased; tp_user_attributes = [] };
           { tp_variance = Invariant; tp_name = ([8:35-37], "Tv"); tp_parameters = []; tp_constraints = []; tp_reified = Erased; tp_user_attributes = [] }];
         f_where_constraints = []; f_variadic = FVnonVariadic;
         f_params =
         [{ param_annotation = ([8:41-45], T); param_type_hint = ((T), (Some ([8:39-40], (Habstr ("T", []))))); 
            param_is_variadic = false; param_pos = [8:41-45]; param_name = "$arr"; 
            param_expr = None; param_readonly = None; param_callconv = None; 
            param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([9:3-26],
             (Throw
                (([9:9-25], Exception),
                 (New ((([9:13-23], Exception), (CI ([9:13-23], "\\Exception"))), [], [], None, ([9:13-23], (function(string $message=_, int $code=_, ?Exception $previous=_): void)))))))
             ];
           fb_annotation = () };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None }
       });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
         ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; 
         ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict;
       fd_fun =
       { f_span = [12:1-19:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((void), (Some ([12:29-33], (Hprim Tvoid)))); 
         f_name = ([12:10-25], "\\call_refinement"); f_tparams = []; 
         f_where_constraints = []; f_variadic = FVnonVariadic; f_params = []; 
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([13:3-16],
             (Expr
                (([13:3-15], dynamic),
                 (Binop ((Eq None), (([13:3-7], dynamic), (Lvar ([13:3-7], $arr))), (([13:10-15], dynamic), (Call ((([13:10-13], (function(): dynamic)), (Id ([13:10-13], "\\bar"))), [], [], None))))))));
             ([15:3-17:4],
              (If (
                 (([15:7-22], dynamic),
                  (Call ((([15:7-10], (function<T as ?Container<nothing>, Tv>(inout nothing $arr): dynamic)), (Id ([15:7-10], "\\foo"))),
                     [((nothing), ([15:7-10], (Happly (([Pos.none], "_"), [])))); ((nothing), ([15:7-10], (Happly (([Pos.none], "_"), []))))],
                     [(([15:11-21], dynamic), (Callconv (Pinout, (([15:11-21], dynamic), (Hole ((([15:17-21], dynamic), (Lvar ([15:17-21], $arr))), (dynamic), (nothing), Typing))))))], None))),
                 [([16:5-12], (Return None))], [([Pos.none], Noop)])));
             ([18:3-25],
              (Expr
                 (([18:3-24], nothing),
                  (Binop ((Eq None), (([18:3-12], nothing), (Lvar ([18:3-12], $whatever))),
                     (([18:15-24], nothing),
                      (Call ((([18:15-18], (function<T as ?Container<nothing>, Tv>(nothing $arr): nothing)), (Id ([18:15-18], "\\qux"))),
                         [((nothing), ([18:15-18], (Happly (([Pos.none], "_"), [])))); ((nothing), ([18:15-18], (Happly (([Pos.none], "_"), []))))],
                         [(([18:19-23], nothing), (Lvar ([18:19-23], $arr)))], None)))
                     )))))
             ];
           fb_annotation = () };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None }
       })